Nonterminals useless in grammar

   func_def
   opt_params
   param_list
   param
   func_body
   stm_list
   statement
   assignment
   if_stm
   loop_stm
   loop_header
   return_stm
   break_stm
   cont_stm
   print_stm


Terminals unused in grammar

   ASSIGN
   ARROW
   DO
   RETURN
   PRINT
   WHILE
   FOR
   IN
   LOOP
   BREAK
   CONTINUE


Rules useless in grammar

   75 func_def: FUNC LROUND opt_params RROUND opt_type func_body

   76 opt_params: %empty
   77           | param_list

   78 param_list: param
   79           | param_list COMMA param

   80 param: ID COLON type

   81 func_body: DO stm_list END
   82          | ARROW expr

   83 stm_list: statement
   84         | stm_list statement

   85 statement: func_call
   86          | assignment
   87          | declaration
   88          | if_stm
   89          | loop_stm
   90          | return_stm
   91          | break_stm
   92          | cont_stm
   93          | print_stm

   94 assignment: secondary ASSIGN expr

   95 if_stm: IF expr THEN stm_list END
   96       | IF expr THEN stm_list ELSE stm_list END

   97 loop_stm: loop_header LOOP stm_list END

   98 loop_header: %empty
   99            | FOR ID IN expr
  100            | FOR expr
  101            | WHILE expr

  102 return_stm: RETURN
  103           | RETURN expr

  104 break_stm: BREAK

  105 cont_stm: CONTINUE

  106 print_stm: PRINT LROUND opt_exprs RROUND


State 61 conflicts: 1 shift/reduce
State 102 conflicts: 1 shift/reduce
State 105 conflicts: 1 shift/reduce
State 106 conflicts: 1 shift/reduce
State 107 conflicts: 1 shift/reduce
State 108 conflicts: 1 shift/reduce
State 109 conflicts: 1 shift/reduce
State 110 conflicts: 1 shift/reduce
State 111 conflicts: 1 shift/reduce
State 112 conflicts: 1 shift/reduce
State 113 conflicts: 1 shift/reduce
State 114 conflicts: 1 shift/reduce
State 115 conflicts: 1 shift/reduce
State 116 conflicts: 1 shift/reduce
State 117 conflicts: 1 shift/reduce


Grammar

    0 $accept: starting $end

    1 starting: dec_list EOF

    2 dec_list: declaration
    3         | declaration SEMICOLON dec_list

    4 declaration: ID opt_type IS expr

    5 opt_type: %empty
    6         | COLON type

    7 type: INTEGER
    8     | COMPLEX
    9     | RATIONAL
   10     | REAL
   11     | STRING
   12     | BOOLEAN
   13     | func_type
   14     | tuple_type
   15     | array_type
   16     | map_type

   17 expr: secondary
   18     | secondary LESS expr
   19     | secondary LESSEQUAL expr
   20     | secondary GREATER expr
   21     | secondary GREATEREQUAL expr
   22     | secondary EQUAL expr
   23     | secondary NOTEQUAL expr
   24     | secondary AND expr
   25     | secondary OR expr
   26     | secondary XOR expr
   27     | secondary PLUS expr
   28     | secondary MINUS expr
   29     | secondary STAR expr
   30     | secondary SLASH expr
   31     | MINUS secondary NEG
   32     | expr ELLIPSIS expr

   33 secondary: primary
   34          | func_call
   35          | secondary indexer

   36 primary: value
   37        | cond
   38        | array_def
   39        | map_def
   40        | tuple_def
   41        | LROUND expr RROUND

   42 value: BOOLEAN_VALUE
   43      | INTEGER_VALUE
   44      | REAL_VALUE
   45      | RATIONAL_VALUE
   46      | COMPLEX_VALUE
   47      | STRING_VALUE
   48      | ID

   49 cond: IF expr THEN expr ELSE expr END

   50 func_call: secondary LROUND opt_exprs RROUND

   51 opt_exprs: %empty
   52          | expr_list

   53 expr_list: expr
   54          | expr_list COMMA expr

   55 array_def: LSQUARE opt_exprs RSQUARE

   56 map_def: LCURLY pair_list RCURLY

   57 pair_list: %empty
   58          | pair
   59          | pair_list COMMA pair

   60 pair: expr COLON expr

   61 tuple_def: LROUND tuple_elist RROUND

   62 tuple_elist: tuple_elem
   63            | tuple_elist COMMA tuple_elem

   64 tuple_elem: ID IS expr
   65           | expr

   66 indexer: LSQUARE expr RSQUARE
   67        | DOT ID
   68        | DOT INTEGER_VALUE

   69 func_type: FUNC LROUND type_list RROUND COLON type

   70 type_list: type
   71          | type_list COMMA type

   72 array_type: LSQUARE type RSQUARE

   73 tuple_type: LROUND type_list RROUND

   74 map_type: LCURLY type COLON type RCURLY


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 4 48 64 67
BOOLEAN_VALUE (259) 42
INTEGER_VALUE (260) 43 68
REAL_VALUE (261) 44
RATIONAL_VALUE (262) 45
COMPLEX_VALUE (263) 46
STRING_VALUE (264) 47
DOT (265) 67 68
COMMA (266) 54 59 63 71
COLON (267) 6 60 69 74
SEMICOLON (268) 3
STAR (269) 29
SLASH (270) 30
PLUS (271) 27
MINUS (272) 28 31
INTEGER (273) 7
COMPLEX (274) 8
RATIONAL (275) 9
REAL (276) 10
STRING (277) 11
BOOLEAN (278) 12
ASSIGN (279)
ARROW (280)
LESS (281) 18
LESSEQUAL (282) 19
GREATER (283) 20
GREATEREQUAL (284) 21
EQUAL (285) 22
NOTEQUAL (286) 23
AND (287) 24
OR (288) 25
XOR (289) 26
FUNC (290) 69
DO (291)
RETURN (292)
PRINT (293)
IS (294) 4 64
IF (295) 49
THEN (296) 49
ELSE (297) 49
END (298) 49
WHILE (299)
FOR (300)
IN (301)
LOOP (302)
BREAK (303)
CONTINUE (304)
LROUND (305) 41 50 61 69 73
RROUND (306) 41 50 61 69 73
LSQUARE (307) 55 66 72
RSQUARE (308) 55 66 72
LCURLY (309) 56 74
RCURLY (310) 56 74
ELLIPSIS (311) 32
EOF (312) 1
NEG (313) 31


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
starting (60)
    on left: 1, on right: 0
dec_list (61)
    on left: 2 3, on right: 1 3
declaration (62)
    on left: 4, on right: 2 3
opt_type (63)
    on left: 5 6, on right: 4
type (64)
    on left: 7 8 9 10 11 12 13 14 15 16, on right: 6 69 70 71 72 74
expr (65)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32, on right:
    4 18 19 20 21 22 23 24 25 26 27 28 29 30 32 41 49 53 54 60 64 65
    66
secondary (66)
    on left: 33 34 35, on right: 17 18 19 20 21 22 23 24 25 26 27 28
    29 30 31 35 50
primary (67)
    on left: 36 37 38 39 40 41, on right: 33
value (68)
    on left: 42 43 44 45 46 47 48, on right: 36
cond (69)
    on left: 49, on right: 37
func_call (70)
    on left: 50, on right: 34
opt_exprs (71)
    on left: 51 52, on right: 50 55
expr_list (72)
    on left: 53 54, on right: 52 54
array_def (73)
    on left: 55, on right: 38
map_def (74)
    on left: 56, on right: 39
pair_list (75)
    on left: 57 58 59, on right: 56 59
pair (76)
    on left: 60, on right: 58 59
tuple_def (77)
    on left: 61, on right: 40
tuple_elist (78)
    on left: 62 63, on right: 61 63
tuple_elem (79)
    on left: 64 65, on right: 62 63
indexer (80)
    on left: 66 67 68, on right: 35
func_type (81)
    on left: 69, on right: 13
type_list (82)
    on left: 70 71, on right: 69 71 73
array_type (83)
    on left: 72, on right: 15
tuple_type (84)
    on left: 73, on right: 14
map_type (85)
    on left: 74, on right: 16


State 0

    0 $accept: . starting $end

    ID  shift, and go to state 1

    starting     go to state 2
    dec_list     go to state 3
    declaration  go to state 4


State 1

    4 declaration: ID . opt_type IS expr

    COLON  shift, and go to state 5

    $default  reduce using rule 5 (opt_type)

    opt_type  go to state 6


State 2

    0 $accept: starting . $end

    $end  shift, and go to state 7


State 3

    1 starting: dec_list . EOF

    EOF  shift, and go to state 8


State 4

    2 dec_list: declaration .
    3         | declaration . SEMICOLON dec_list

    SEMICOLON  shift, and go to state 9

    $default  reduce using rule 2 (dec_list)


State 5

    6 opt_type: COLON . type

    INTEGER   shift, and go to state 10
    COMPLEX   shift, and go to state 11
    RATIONAL  shift, and go to state 12
    REAL      shift, and go to state 13
    STRING    shift, and go to state 14
    BOOLEAN   shift, and go to state 15
    FUNC      shift, and go to state 16
    LROUND    shift, and go to state 17
    LSQUARE   shift, and go to state 18
    LCURLY    shift, and go to state 19

    type        go to state 20
    func_type   go to state 21
    array_type  go to state 22
    tuple_type  go to state 23
    map_type    go to state 24


State 6

    4 declaration: ID opt_type . IS expr

    IS  shift, and go to state 25


State 7

    0 $accept: starting $end .

    $default  accept


State 8

    1 starting: dec_list EOF .

    $default  reduce using rule 1 (starting)


State 9

    3 dec_list: declaration SEMICOLON . dec_list

    ID  shift, and go to state 1

    dec_list     go to state 26
    declaration  go to state 4


State 10

    7 type: INTEGER .

    $default  reduce using rule 7 (type)


State 11

    8 type: COMPLEX .

    $default  reduce using rule 8 (type)


State 12

    9 type: RATIONAL .

    $default  reduce using rule 9 (type)


State 13

   10 type: REAL .

    $default  reduce using rule 10 (type)


State 14

   11 type: STRING .

    $default  reduce using rule 11 (type)


State 15

   12 type: BOOLEAN .

    $default  reduce using rule 12 (type)


State 16

   69 func_type: FUNC . LROUND type_list RROUND COLON type

    LROUND  shift, and go to state 27


State 17

   73 tuple_type: LROUND . type_list RROUND

    INTEGER   shift, and go to state 10
    COMPLEX   shift, and go to state 11
    RATIONAL  shift, and go to state 12
    REAL      shift, and go to state 13
    STRING    shift, and go to state 14
    BOOLEAN   shift, and go to state 15
    FUNC      shift, and go to state 16
    LROUND    shift, and go to state 17
    LSQUARE   shift, and go to state 18
    LCURLY    shift, and go to state 19

    type        go to state 28
    func_type   go to state 21
    type_list   go to state 29
    array_type  go to state 22
    tuple_type  go to state 23
    map_type    go to state 24


State 18

   72 array_type: LSQUARE . type RSQUARE

    INTEGER   shift, and go to state 10
    COMPLEX   shift, and go to state 11
    RATIONAL  shift, and go to state 12
    REAL      shift, and go to state 13
    STRING    shift, and go to state 14
    BOOLEAN   shift, and go to state 15
    FUNC      shift, and go to state 16
    LROUND    shift, and go to state 17
    LSQUARE   shift, and go to state 18
    LCURLY    shift, and go to state 19

    type        go to state 30
    func_type   go to state 21
    array_type  go to state 22
    tuple_type  go to state 23
    map_type    go to state 24


State 19

   74 map_type: LCURLY . type COLON type RCURLY

    INTEGER   shift, and go to state 10
    COMPLEX   shift, and go to state 11
    RATIONAL  shift, and go to state 12
    REAL      shift, and go to state 13
    STRING    shift, and go to state 14
    BOOLEAN   shift, and go to state 15
    FUNC      shift, and go to state 16
    LROUND    shift, and go to state 17
    LSQUARE   shift, and go to state 18
    LCURLY    shift, and go to state 19

    type        go to state 31
    func_type   go to state 21
    array_type  go to state 22
    tuple_type  go to state 23
    map_type    go to state 24


State 20

    6 opt_type: COLON type .

    $default  reduce using rule 6 (opt_type)


State 21

   13 type: func_type .

    $default  reduce using rule 13 (type)


State 22

   15 type: array_type .

    $default  reduce using rule 15 (type)


State 23

   14 type: tuple_type .

    $default  reduce using rule 14 (type)


State 24

   16 type: map_type .

    $default  reduce using rule 16 (type)


State 25

    4 declaration: ID opt_type IS . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 44
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 26

    3 dec_list: declaration SEMICOLON dec_list .

    $default  reduce using rule 3 (dec_list)


State 27

   69 func_type: FUNC LROUND . type_list RROUND COLON type

    INTEGER   shift, and go to state 10
    COMPLEX   shift, and go to state 11
    RATIONAL  shift, and go to state 12
    REAL      shift, and go to state 13
    STRING    shift, and go to state 14
    BOOLEAN   shift, and go to state 15
    FUNC      shift, and go to state 16
    LROUND    shift, and go to state 17
    LSQUARE   shift, and go to state 18
    LCURLY    shift, and go to state 19

    type        go to state 28
    func_type   go to state 21
    type_list   go to state 53
    array_type  go to state 22
    tuple_type  go to state 23
    map_type    go to state 24


State 28

   70 type_list: type .

    $default  reduce using rule 70 (type_list)


State 29

   71 type_list: type_list . COMMA type
   73 tuple_type: LROUND type_list . RROUND

    COMMA   shift, and go to state 54
    RROUND  shift, and go to state 55


State 30

   72 array_type: LSQUARE type . RSQUARE

    RSQUARE  shift, and go to state 56


State 31

   74 map_type: LCURLY type . COLON type RCURLY

    COLON  shift, and go to state 57


State 32

   48 value: ID .

    $default  reduce using rule 48 (value)


State 33

   42 value: BOOLEAN_VALUE .

    $default  reduce using rule 42 (value)


State 34

   43 value: INTEGER_VALUE .

    $default  reduce using rule 43 (value)


State 35

   44 value: REAL_VALUE .

    $default  reduce using rule 44 (value)


State 36

   45 value: RATIONAL_VALUE .

    $default  reduce using rule 45 (value)


State 37

   46 value: COMPLEX_VALUE .

    $default  reduce using rule 46 (value)


State 38

   47 value: STRING_VALUE .

    $default  reduce using rule 47 (value)


State 39

   31 expr: MINUS . secondary NEG

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    secondary  go to state 58
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 40

   49 cond: IF . expr THEN expr ELSE expr END

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 59
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 41

   41 primary: LROUND . expr RROUND
   61 tuple_def: LROUND . tuple_elist RROUND

    ID              shift, and go to state 60
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr         go to state 61
    secondary    go to state 45
    primary      go to state 46
    value        go to state 47
    cond         go to state 48
    func_call    go to state 49
    array_def    go to state 50
    map_def      go to state 51
    tuple_def    go to state 52
    tuple_elist  go to state 62
    tuple_elem   go to state 63


State 42

   55 array_def: LSQUARE . opt_exprs RSQUARE

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    $default  reduce using rule 51 (opt_exprs)

    expr       go to state 64
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    opt_exprs  go to state 65
    expr_list  go to state 66
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 43

   56 map_def: LCURLY . pair_list RCURLY

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    $default  reduce using rule 57 (pair_list)

    expr       go to state 67
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    pair_list  go to state 68
    pair       go to state 69
    tuple_def  go to state 52


State 44

    4 declaration: ID opt_type IS expr .
   32 expr: expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    $default  reduce using rule 4 (declaration)


State 45

   17 expr: secondary .
   18     | secondary . LESS expr
   19     | secondary . LESSEQUAL expr
   20     | secondary . GREATER expr
   21     | secondary . GREATEREQUAL expr
   22     | secondary . EQUAL expr
   23     | secondary . NOTEQUAL expr
   24     | secondary . AND expr
   25     | secondary . OR expr
   26     | secondary . XOR expr
   27     | secondary . PLUS expr
   28     | secondary . MINUS expr
   29     | secondary . STAR expr
   30     | secondary . SLASH expr
   35 secondary: secondary . indexer
   50 func_call: secondary . LROUND opt_exprs RROUND

    DOT           shift, and go to state 71
    STAR          shift, and go to state 72
    SLASH         shift, and go to state 73
    PLUS          shift, and go to state 74
    MINUS         shift, and go to state 75
    LESS          shift, and go to state 76
    LESSEQUAL     shift, and go to state 77
    GREATER       shift, and go to state 78
    GREATEREQUAL  shift, and go to state 79
    EQUAL         shift, and go to state 80
    NOTEQUAL      shift, and go to state 81
    AND           shift, and go to state 82
    OR            shift, and go to state 83
    XOR           shift, and go to state 84
    LROUND        shift, and go to state 85
    LSQUARE       shift, and go to state 86

    $default  reduce using rule 17 (expr)

    indexer  go to state 87


State 46

   33 secondary: primary .

    $default  reduce using rule 33 (secondary)


State 47

   36 primary: value .

    $default  reduce using rule 36 (primary)


State 48

   37 primary: cond .

    $default  reduce using rule 37 (primary)


State 49

   34 secondary: func_call .

    $default  reduce using rule 34 (secondary)


State 50

   38 primary: array_def .

    $default  reduce using rule 38 (primary)


State 51

   39 primary: map_def .

    $default  reduce using rule 39 (primary)


State 52

   40 primary: tuple_def .

    $default  reduce using rule 40 (primary)


State 53

   69 func_type: FUNC LROUND type_list . RROUND COLON type
   71 type_list: type_list . COMMA type

    COMMA   shift, and go to state 54
    RROUND  shift, and go to state 88


State 54

   71 type_list: type_list COMMA . type

    INTEGER   shift, and go to state 10
    COMPLEX   shift, and go to state 11
    RATIONAL  shift, and go to state 12
    REAL      shift, and go to state 13
    STRING    shift, and go to state 14
    BOOLEAN   shift, and go to state 15
    FUNC      shift, and go to state 16
    LROUND    shift, and go to state 17
    LSQUARE   shift, and go to state 18
    LCURLY    shift, and go to state 19

    type        go to state 89
    func_type   go to state 21
    array_type  go to state 22
    tuple_type  go to state 23
    map_type    go to state 24


State 55

   73 tuple_type: LROUND type_list RROUND .

    $default  reduce using rule 73 (tuple_type)


State 56

   72 array_type: LSQUARE type RSQUARE .

    $default  reduce using rule 72 (array_type)


State 57

   74 map_type: LCURLY type COLON . type RCURLY

    INTEGER   shift, and go to state 10
    COMPLEX   shift, and go to state 11
    RATIONAL  shift, and go to state 12
    REAL      shift, and go to state 13
    STRING    shift, and go to state 14
    BOOLEAN   shift, and go to state 15
    FUNC      shift, and go to state 16
    LROUND    shift, and go to state 17
    LSQUARE   shift, and go to state 18
    LCURLY    shift, and go to state 19

    type        go to state 90
    func_type   go to state 21
    array_type  go to state 22
    tuple_type  go to state 23
    map_type    go to state 24


State 58

   31 expr: MINUS secondary . NEG
   35 secondary: secondary . indexer
   50 func_call: secondary . LROUND opt_exprs RROUND

    DOT      shift, and go to state 71
    LROUND   shift, and go to state 85
    LSQUARE  shift, and go to state 86
    NEG      shift, and go to state 91

    indexer  go to state 87


State 59

   32 expr: expr . ELLIPSIS expr
   49 cond: IF expr . THEN expr ELSE expr END

    THEN      shift, and go to state 92
    ELLIPSIS  shift, and go to state 70


State 60

   48 value: ID .
   64 tuple_elem: ID . IS expr

    IS  shift, and go to state 93

    $default  reduce using rule 48 (value)


State 61

   32 expr: expr . ELLIPSIS expr
   41 primary: LROUND expr . RROUND
   65 tuple_elem: expr .

    RROUND    shift, and go to state 94
    ELLIPSIS  shift, and go to state 70

    RROUND    [reduce using rule 65 (tuple_elem)]
    $default  reduce using rule 65 (tuple_elem)


State 62

   61 tuple_def: LROUND tuple_elist . RROUND
   63 tuple_elist: tuple_elist . COMMA tuple_elem

    COMMA   shift, and go to state 95
    RROUND  shift, and go to state 96


State 63

   62 tuple_elist: tuple_elem .

    $default  reduce using rule 62 (tuple_elist)


State 64

   32 expr: expr . ELLIPSIS expr
   53 expr_list: expr .

    ELLIPSIS  shift, and go to state 70

    $default  reduce using rule 53 (expr_list)


State 65

   55 array_def: LSQUARE opt_exprs . RSQUARE

    RSQUARE  shift, and go to state 97


State 66

   52 opt_exprs: expr_list .
   54 expr_list: expr_list . COMMA expr

    COMMA  shift, and go to state 98

    $default  reduce using rule 52 (opt_exprs)


State 67

   32 expr: expr . ELLIPSIS expr
   60 pair: expr . COLON expr

    COLON     shift, and go to state 99
    ELLIPSIS  shift, and go to state 70


State 68

   56 map_def: LCURLY pair_list . RCURLY
   59 pair_list: pair_list . COMMA pair

    COMMA   shift, and go to state 100
    RCURLY  shift, and go to state 101


State 69

   58 pair_list: pair .

    $default  reduce using rule 58 (pair_list)


State 70

   32 expr: expr ELLIPSIS . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 102
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 71

   67 indexer: DOT . ID
   68        | DOT . INTEGER_VALUE

    ID             shift, and go to state 103
    INTEGER_VALUE  shift, and go to state 104


State 72

   29 expr: secondary STAR . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 105
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 73

   30 expr: secondary SLASH . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 106
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 74

   27 expr: secondary PLUS . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 107
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 75

   28 expr: secondary MINUS . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 108
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 76

   18 expr: secondary LESS . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 109
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 77

   19 expr: secondary LESSEQUAL . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 110
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 78

   20 expr: secondary GREATER . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 111
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 79

   21 expr: secondary GREATEREQUAL . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 112
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 80

   22 expr: secondary EQUAL . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 113
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 81

   23 expr: secondary NOTEQUAL . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 114
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 82

   24 expr: secondary AND . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 115
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 83

   25 expr: secondary OR . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 116
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 84

   26 expr: secondary XOR . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 117
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 85

   50 func_call: secondary LROUND . opt_exprs RROUND

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    $default  reduce using rule 51 (opt_exprs)

    expr       go to state 64
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    opt_exprs  go to state 118
    expr_list  go to state 66
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 86

   66 indexer: LSQUARE . expr RSQUARE

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 119
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 87

   35 secondary: secondary indexer .

    $default  reduce using rule 35 (secondary)


State 88

   69 func_type: FUNC LROUND type_list RROUND . COLON type

    COLON  shift, and go to state 120


State 89

   71 type_list: type_list COMMA type .

    $default  reduce using rule 71 (type_list)


State 90

   74 map_type: LCURLY type COLON type . RCURLY

    RCURLY  shift, and go to state 121


State 91

   31 expr: MINUS secondary NEG .

    $default  reduce using rule 31 (expr)


State 92

   49 cond: IF expr THEN . expr ELSE expr END

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 122
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 93

   64 tuple_elem: ID IS . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 123
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 94

   41 primary: LROUND expr RROUND .

    $default  reduce using rule 41 (primary)


State 95

   63 tuple_elist: tuple_elist COMMA . tuple_elem

    ID              shift, and go to state 60
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr        go to state 124
    secondary   go to state 45
    primary     go to state 46
    value       go to state 47
    cond        go to state 48
    func_call   go to state 49
    array_def   go to state 50
    map_def     go to state 51
    tuple_def   go to state 52
    tuple_elem  go to state 125


State 96

   61 tuple_def: LROUND tuple_elist RROUND .

    $default  reduce using rule 61 (tuple_def)


State 97

   55 array_def: LSQUARE opt_exprs RSQUARE .

    $default  reduce using rule 55 (array_def)


State 98

   54 expr_list: expr_list COMMA . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 126
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 99

   60 pair: expr COLON . expr

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 127
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 100

   59 pair_list: pair_list COMMA . pair

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 67
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    pair       go to state 128
    tuple_def  go to state 52


State 101

   56 map_def: LCURLY pair_list RCURLY .

    $default  reduce using rule 56 (map_def)


State 102

   32 expr: expr . ELLIPSIS expr
   32     | expr ELLIPSIS expr .

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 32 (expr)]
    $default  reduce using rule 32 (expr)


State 103

   67 indexer: DOT ID .

    $default  reduce using rule 67 (indexer)


State 104

   68 indexer: DOT INTEGER_VALUE .

    $default  reduce using rule 68 (indexer)


State 105

   29 expr: secondary STAR expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 29 (expr)]
    $default  reduce using rule 29 (expr)


State 106

   30 expr: secondary SLASH expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 30 (expr)]
    $default  reduce using rule 30 (expr)


State 107

   27 expr: secondary PLUS expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 27 (expr)]
    $default  reduce using rule 27 (expr)


State 108

   28 expr: secondary MINUS expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 28 (expr)]
    $default  reduce using rule 28 (expr)


State 109

   18 expr: secondary LESS expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 18 (expr)]
    $default  reduce using rule 18 (expr)


State 110

   19 expr: secondary LESSEQUAL expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 19 (expr)]
    $default  reduce using rule 19 (expr)


State 111

   20 expr: secondary GREATER expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 20 (expr)]
    $default  reduce using rule 20 (expr)


State 112

   21 expr: secondary GREATEREQUAL expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 21 (expr)]
    $default  reduce using rule 21 (expr)


State 113

   22 expr: secondary EQUAL expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)


State 114

   23 expr: secondary NOTEQUAL expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 23 (expr)]
    $default  reduce using rule 23 (expr)


State 115

   24 expr: secondary AND expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 24 (expr)]
    $default  reduce using rule 24 (expr)


State 116

   25 expr: secondary OR expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 25 (expr)]
    $default  reduce using rule 25 (expr)


State 117

   26 expr: secondary XOR expr .
   32     | expr . ELLIPSIS expr

    ELLIPSIS  shift, and go to state 70

    ELLIPSIS  [reduce using rule 26 (expr)]
    $default  reduce using rule 26 (expr)


State 118

   50 func_call: secondary LROUND opt_exprs . RROUND

    RROUND  shift, and go to state 129


State 119

   32 expr: expr . ELLIPSIS expr
   66 indexer: LSQUARE expr . RSQUARE

    RSQUARE   shift, and go to state 130
    ELLIPSIS  shift, and go to state 70


State 120

   69 func_type: FUNC LROUND type_list RROUND COLON . type

    INTEGER   shift, and go to state 10
    COMPLEX   shift, and go to state 11
    RATIONAL  shift, and go to state 12
    REAL      shift, and go to state 13
    STRING    shift, and go to state 14
    BOOLEAN   shift, and go to state 15
    FUNC      shift, and go to state 16
    LROUND    shift, and go to state 17
    LSQUARE   shift, and go to state 18
    LCURLY    shift, and go to state 19

    type        go to state 131
    func_type   go to state 21
    array_type  go to state 22
    tuple_type  go to state 23
    map_type    go to state 24


State 121

   74 map_type: LCURLY type COLON type RCURLY .

    $default  reduce using rule 74 (map_type)


State 122

   32 expr: expr . ELLIPSIS expr
   49 cond: IF expr THEN expr . ELSE expr END

    ELSE      shift, and go to state 132
    ELLIPSIS  shift, and go to state 70


State 123

   32 expr: expr . ELLIPSIS expr
   64 tuple_elem: ID IS expr .

    ELLIPSIS  shift, and go to state 70

    $default  reduce using rule 64 (tuple_elem)


State 124

   32 expr: expr . ELLIPSIS expr
   65 tuple_elem: expr .

    ELLIPSIS  shift, and go to state 70

    $default  reduce using rule 65 (tuple_elem)


State 125

   63 tuple_elist: tuple_elist COMMA tuple_elem .

    $default  reduce using rule 63 (tuple_elist)


State 126

   32 expr: expr . ELLIPSIS expr
   54 expr_list: expr_list COMMA expr .

    ELLIPSIS  shift, and go to state 70

    $default  reduce using rule 54 (expr_list)


State 127

   32 expr: expr . ELLIPSIS expr
   60 pair: expr COLON expr .

    ELLIPSIS  shift, and go to state 70

    $default  reduce using rule 60 (pair)


State 128

   59 pair_list: pair_list COMMA pair .

    $default  reduce using rule 59 (pair_list)


State 129

   50 func_call: secondary LROUND opt_exprs RROUND .

    $default  reduce using rule 50 (func_call)


State 130

   66 indexer: LSQUARE expr RSQUARE .

    $default  reduce using rule 66 (indexer)


State 131

   69 func_type: FUNC LROUND type_list RROUND COLON type .

    $default  reduce using rule 69 (func_type)


State 132

   49 cond: IF expr THEN expr ELSE . expr END

    ID              shift, and go to state 32
    BOOLEAN_VALUE   shift, and go to state 33
    INTEGER_VALUE   shift, and go to state 34
    REAL_VALUE      shift, and go to state 35
    RATIONAL_VALUE  shift, and go to state 36
    COMPLEX_VALUE   shift, and go to state 37
    STRING_VALUE    shift, and go to state 38
    MINUS           shift, and go to state 39
    IF              shift, and go to state 40
    LROUND          shift, and go to state 41
    LSQUARE         shift, and go to state 42
    LCURLY          shift, and go to state 43

    expr       go to state 133
    secondary  go to state 45
    primary    go to state 46
    value      go to state 47
    cond       go to state 48
    func_call  go to state 49
    array_def  go to state 50
    map_def    go to state 51
    tuple_def  go to state 52


State 133

   32 expr: expr . ELLIPSIS expr
   49 cond: IF expr THEN expr ELSE expr . END

    END       shift, and go to state 134
    ELLIPSIS  shift, and go to state 70


State 134

   49 cond: IF expr THEN expr ELSE expr END .

    $default  reduce using rule 49 (cond)
