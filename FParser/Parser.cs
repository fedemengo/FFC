// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Input file <FParser/gppg/grammar.y - 6/23/2018 2:41:36 PM>

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using FFC.FAST;
using FFC.FLexer;

namespace FFC.FParser
{

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<TValue, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[122];
  private static State[] states = new State[225];
  private static string[] nonTerms = new string[] {
      "starting", "$accept", "dec_list", "declaration", "identifier", "opt_type", 
      "math_expr", "func_def", "type", "func_type", "tuple_type", "array_type", 
      "map_type", "expr", "secondary", "primary", "func_call", "indexer", "value", 
      "cond", "array_def", "map_def", "tuple_def", "opt_params", "func_body", 
      "param_list", "param", "stm_list", "statement", "nif_stm", "assignment", 
      "loop_stm", "return_stm", "break_stm", "cont_stm", "print_stm", "if_stm", 
      "opt_exprs", "expr_list", "e_if_list", "opt_else", "nif_stmlist", "loop_header", 
      "pair_list", "pair", "tuple_elist", "tuple_elem", "type_list", };

  static Parser() {
    states[0] = new State(new int[]{4,56},new int[]{-1,1,-3,3,-4,224,-5,6});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,4,4,56},new int[]{-4,5,-5,6});
    states[4] = new State(-2);
    states[5] = new State(-4);
    states[6] = new State(new int[]{13,131,28,-9},new int[]{-6,7});
    states[7] = new State(new int[]{28,8});
    states[8] = new State(new int[]{26,222,5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-7,9,-8,221,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[9] = new State(new int[]{14,10,47,11,48,13,49,15,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37});
    states[10] = new State(-5);
    states[11] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,12,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[12] = new State(new int[]{47,-25,48,-25,49,15,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37,14,-25,12,-25,40,-25,42,-25,30,-25,31,-25,32,-25,13,-25,44,-25,36,-25});
    states[13] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,14,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[14] = new State(new int[]{47,-26,48,-26,49,15,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37,14,-26,12,-26,40,-26,42,-26,30,-26,31,-26,32,-26,13,-26,44,-26,36,-26});
    states[15] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,16,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[16] = new State(new int[]{47,-27,48,-27,49,-27,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37,14,-27,12,-27,40,-27,42,-27,30,-27,31,-27,32,-27,13,-27,44,-27,36,-27});
    states[17] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,18,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[18] = new State(new int[]{47,-28,48,-28,49,-28,50,-28,51,-28,52,-28,53,-28,55,-28,56,27,54,-28,57,31,58,33,59,35,60,37,14,-28,12,-28,40,-28,42,-28,30,-28,31,-28,32,-28,13,-28,44,-28,36,-28});
    states[19] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,20,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[20] = new State(new int[]{47,-29,48,-29,49,-29,50,-29,51,-29,52,-29,53,-29,55,-29,56,27,54,-29,57,31,58,33,59,35,60,37,14,-29,12,-29,40,-29,42,-29,30,-29,31,-29,32,-29,13,-29,44,-29,36,-29});
    states[21] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,22,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[22] = new State(new int[]{47,-30,48,-30,49,-30,50,-30,51,-30,52,-30,53,-30,55,-30,56,27,54,-30,57,31,58,33,59,35,60,37,14,-30,12,-30,40,-30,42,-30,30,-30,31,-30,32,-30,13,-30,44,-30,36,-30});
    states[23] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,24,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[24] = new State(new int[]{47,-31,48,-31,49,-31,50,-31,51,-31,52,-31,53,-31,55,-31,56,27,54,-31,57,31,58,33,59,35,60,37,14,-31,12,-31,40,-31,42,-31,30,-31,31,-31,32,-31,13,-31,44,-31,36,-31});
    states[25] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,26,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[26] = new State(new int[]{47,-32,48,-32,49,-32,50,-32,51,-32,52,-32,53,-32,55,-32,56,27,54,-32,57,31,58,33,59,35,60,37,14,-32,12,-32,40,-32,42,-32,30,-32,31,-32,32,-32,13,-32,44,-32,36,-32});
    states[27] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,28,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[28] = new State(new int[]{47,-33,48,-33,49,-33,50,-33,51,-33,52,-33,53,-33,55,-33,56,-33,54,-33,57,-33,58,33,59,35,60,37,14,-33,12,-33,40,-33,42,-33,30,-33,31,-33,32,-33,13,-33,44,-33,36,-33});
    states[29] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,30,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[30] = new State(new int[]{47,-34,48,-34,49,-34,50,-34,51,-34,52,-34,53,-34,55,-34,56,27,54,-34,57,31,58,33,59,35,60,37,14,-34,12,-34,40,-34,42,-34,30,-34,31,-34,32,-34,13,-34,44,-34,36,-34});
    states[31] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,32,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[32] = new State(new int[]{47,-35,48,-35,49,-35,50,-35,51,-35,52,-35,53,-35,55,-35,56,-35,54,-35,57,-35,58,33,59,35,60,37,14,-35,12,-35,40,-35,42,-35,30,-35,31,-35,32,-35,13,-35,44,-35,36,-35});
    states[33] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,34,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[34] = new State(-36);
    states[35] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,36,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[36] = new State(-37);
    states[37] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,38,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[38] = new State(-38);
    states[39] = new State(new int[]{39,40,45,194,41,94,11,127,14,-23,47,-23,48,-23,49,-23,50,-23,51,-23,52,-23,53,-23,55,-23,56,-23,54,-23,57,-23,58,-23,59,-23,60,-23,12,-23,40,-23,42,-23,30,-23,31,-23,32,-23,13,-23,44,-23,36,-23},new int[]{-18,93});
    states[40] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98,40,-78},new int[]{-38,41,-39,43,-14,69,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[41] = new State(new int[]{40,42});
    states[42] = new State(-77);
    states[43] = new State(new int[]{12,44,40,-79,42,-79,14,-79});
    states[44] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-14,45,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[45] = new State(-81);
    states[46] = new State(new int[]{47,11,48,13,49,15,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37,12,-21,40,-21,42,-21,14,-21,31,-21,32,-21,13,-21,44,-21});
    states[47] = new State(-41);
    states[48] = new State(-44);
    states[49] = new State(-49);
    states[50] = new State(-50);
    states[51] = new State(-51);
    states[52] = new State(-52);
    states[53] = new State(-53);
    states[54] = new State(-54);
    states[55] = new State(-55);
    states[56] = new State(-8);
    states[57] = new State(-45);
    states[58] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,59,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[59] = new State(new int[]{30,60,47,11,48,13,49,15,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37});
    states[60] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-14,61,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[61] = new State(new int[]{31,62});
    states[62] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-14,63,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[63] = new State(new int[]{32,64});
    states[64] = new State(-56);
    states[65] = new State(-46);
    states[66] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98,42,-78},new int[]{-38,67,-39,43,-14,69,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[67] = new State(new int[]{42,68});
    states[68] = new State(-101);
    states[69] = new State(-80);
    states[70] = new State(-47);
    states[71] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98,44,-103,12,-103},new int[]{-44,72,-45,220,-14,76,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[72] = new State(new int[]{44,73,12,74});
    states[73] = new State(-102);
    states[74] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-45,75,-14,76,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[75] = new State(-105);
    states[76] = new State(new int[]{13,77});
    states[77] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-14,78,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[78] = new State(-106);
    states[79] = new State(-48);
    states[80] = new State(new int[]{4,56,5,49,6,50,7,51,8,52,9,53,10,54,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-46,81,-47,219,-5,85,-14,218,-7,46,-15,39,-16,47,-19,48,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[81] = new State(new int[]{40,82,12,83});
    states[82] = new State(-107);
    states[83] = new State(new int[]{4,56,5,49,6,50,7,51,8,52,9,53,10,54,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-47,84,-5,85,-14,218,-7,46,-15,39,-16,47,-19,48,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[84] = new State(-109);
    states[85] = new State(new int[]{28,86,39,-55,45,-55,41,-55,11,-55,47,-55,48,-55,49,-55,50,-55,51,-55,52,-55,53,-55,55,-55,56,-55,54,-55,57,-55,58,-55,59,-55,60,-55,40,-55,12,-55});
    states[86] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-14,87,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[87] = new State(-110);
    states[88] = new State(-42);
    states[89] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,90,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[90] = new State(new int[]{47,11,48,13,49,15,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37,14,-24,12,-24,40,-24,42,-24,30,-24,31,-24,32,-24,13,-24,44,-24,36,-24});
    states[91] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80},new int[]{-15,92,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[92] = new State(new int[]{39,40,41,94,11,127,14,-39,47,-39,48,-39,49,-39,50,-39,51,-39,52,-39,53,-39,55,-39,56,-39,54,-39,57,-39,58,-39,59,-39,60,-39,12,-39,40,-39,42,-39,30,-39,31,-39,32,-39,13,-39,44,-39,36,-39},new int[]{-18,93});
    states[93] = new State(-43);
    states[94] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-14,95,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[95] = new State(new int[]{42,96});
    states[96] = new State(-112);
    states[97] = new State(-22);
    states[98] = new State(new int[]{39,99});
    states[99] = new State(new int[]{4,56,40,-58},new int[]{-24,100,-26,211,-27,217,-5,214});
    states[100] = new State(new int[]{40,101});
    states[101] = new State(new int[]{13,131,22,-9,24,-9},new int[]{-6,102});
    states[102] = new State(new int[]{22,104,24,207},new int[]{-25,103});
    states[103] = new State(-57);
    states[104] = new State(new int[]{29,109,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,36,-92},new int[]{-28,105,-29,192,-37,108,-30,120,-17,121,-15,123,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188});
    states[105] = new State(new int[]{32,106,29,109,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,36,-92},new int[]{-29,107,-37,108,-30,120,-17,121,-15,123,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188});
    states[106] = new State(-63);
    states[107] = new State(-66);
    states[108] = new State(-75);
    states[109] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,110,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[110] = new State(new int[]{30,111,47,11,48,13,49,15,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37});
    states[111] = new State(new int[]{29,109,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,46,89,57,91,21,98,36,-92},new int[]{-28,112,-14,61,-29,192,-37,108,-30,120,-17,121,-15,193,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188,-7,46,-8,97});
    states[112] = new State(new int[]{31,202,32,200,29,109,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,36,-92},new int[]{-40,113,-41,201,-29,107,-37,108,-30,120,-17,121,-15,123,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188});
    states[113] = new State(new int[]{31,115,32,200},new int[]{-41,114});
    states[114] = new State(-83);
    states[115] = new State(new int[]{29,116,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,36,-92},new int[]{-42,196,-30,199,-17,121,-15,123,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188});
    states[116] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,117,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[117] = new State(new int[]{30,118,47,11,48,13,49,15,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37});
    states[118] = new State(new int[]{29,109,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,46,89,57,91,21,98,36,-92},new int[]{-28,119,-14,61,-29,192,-37,108,-30,120,-17,121,-15,193,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188,-7,46,-8,97});
    states[119] = new State(new int[]{29,109,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,31,-86,32,-86,36,-92},new int[]{-29,107,-37,108,-30,120,-17,121,-15,123,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188});
    states[120] = new State(-76);
    states[121] = new State(new int[]{14,122,39,-42,27,-42,41,-42,11,-42,45,-42,47,-42,48,-42,49,-42,50,-42,51,-42,52,-42,53,-42,55,-42,56,-42,54,-42,57,-42,58,-42,59,-42,60,-42,31,-42});
    states[122] = new State(-67);
    states[123] = new State(new int[]{39,40,27,124,41,94,11,127},new int[]{-18,93});
    states[124] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-14,125,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[125] = new State(new int[]{14,126});
    states[126] = new State(-82);
    states[127] = new State(new int[]{6,129,4,56},new int[]{-5,128});
    states[128] = new State(-113);
    states[129] = new State(-114);
    states[130] = new State(new int[]{13,131,39,-55,27,-55,41,-55,11,-55,45,-55,47,-55,48,-55,49,-55,50,-55,51,-55,52,-55,53,-55,55,-55,56,-55,54,-55,57,-55,58,-55,59,-55,60,-55,31,-55,28,-9},new int[]{-6,7});
    states[131] = new State(new int[]{15,133,16,134,17,135,18,136,19,137,20,138,21,140,39,147,41,153,43,157},new int[]{-9,132,-10,139,-11,146,-12,152,-13,156});
    states[132] = new State(-10);
    states[133] = new State(-11);
    states[134] = new State(-12);
    states[135] = new State(-13);
    states[136] = new State(-14);
    states[137] = new State(-15);
    states[138] = new State(-16);
    states[139] = new State(-17);
    states[140] = new State(new int[]{39,141});
    states[141] = new State(new int[]{15,133,16,134,17,135,18,136,19,137,20,138,21,140,39,147,41,153,43,157,40,-116,12,-116},new int[]{-48,142,-9,162,-10,139,-11,146,-12,152,-13,156});
    states[142] = new State(new int[]{40,143,12,150});
    states[143] = new State(new int[]{13,144});
    states[144] = new State(new int[]{15,133,16,134,17,135,18,136,19,137,20,138,21,140,39,147,41,153,43,157},new int[]{-9,145,-10,139,-11,146,-12,152,-13,156});
    states[145] = new State(-115);
    states[146] = new State(-18);
    states[147] = new State(new int[]{15,133,16,134,17,135,18,136,19,137,20,138,21,140,39,147,41,153,43,157,40,-116,12,-116},new int[]{-48,148,-9,162,-10,139,-11,146,-12,152,-13,156});
    states[148] = new State(new int[]{40,149,12,150});
    states[149] = new State(-120);
    states[150] = new State(new int[]{15,133,16,134,17,135,18,136,19,137,20,138,21,140,39,147,41,153,43,157},new int[]{-9,151,-10,139,-11,146,-12,152,-13,156});
    states[151] = new State(-118);
    states[152] = new State(-19);
    states[153] = new State(new int[]{15,133,16,134,17,135,18,136,19,137,20,138,21,140,39,147,41,153,43,157},new int[]{-9,154,-10,139,-11,146,-12,152,-13,156});
    states[154] = new State(new int[]{42,155});
    states[155] = new State(-119);
    states[156] = new State(-20);
    states[157] = new State(new int[]{15,133,16,134,17,135,18,136,19,137,20,138,21,140,39,147,41,153,43,157},new int[]{-9,158,-10,139,-11,146,-12,152,-13,156});
    states[158] = new State(new int[]{13,159});
    states[159] = new State(new int[]{15,133,16,134,17,135,18,136,19,137,20,138,21,140,39,147,41,153,43,157},new int[]{-9,160,-10,139,-11,146,-12,152,-13,156});
    states[160] = new State(new int[]{44,161});
    states[161] = new State(-121);
    states[162] = new State(-117);
    states[163] = new State(-68);
    states[164] = new State(-69);
    states[165] = new State(-70);
    states[166] = new State(new int[]{36,167});
    states[167] = new State(new int[]{29,109,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,36,-92},new int[]{-28,168,-29,192,-37,108,-30,120,-17,121,-15,123,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188});
    states[168] = new State(new int[]{32,169,29,109,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,36,-92},new int[]{-29,107,-37,108,-30,120,-17,121,-15,123,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188});
    states[169] = new State(-91);
    states[170] = new State(new int[]{4,56,5,49,6,50,7,51,8,52,9,53,10,54,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-5,171,-7,174,-15,39,-16,47,-19,48,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[171] = new State(new int[]{35,172,39,-55,45,-55,41,-55,11,-55,47,-55,48,-55,49,-55,50,-55,51,-55,52,-55,53,-55,55,-55,56,-55,54,-55,57,-55,58,-55,59,-55,60,-55,36,-55});
    states[172] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,173,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[173] = new State(new int[]{47,11,48,13,49,15,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37,36,-93});
    states[174] = new State(new int[]{47,11,48,13,49,15,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37,36,-94});
    states[175] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,176,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[176] = new State(new int[]{47,11,48,13,49,15,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37,36,-95});
    states[177] = new State(-71);
    states[178] = new State(new int[]{14,179,5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-14,180,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[179] = new State(-96);
    states[180] = new State(new int[]{14,181});
    states[181] = new State(-97);
    states[182] = new State(-72);
    states[183] = new State(new int[]{14,184});
    states[184] = new State(-98);
    states[185] = new State(-73);
    states[186] = new State(new int[]{14,187});
    states[187] = new State(-99);
    states[188] = new State(-74);
    states[189] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98,14,-78},new int[]{-38,190,-39,43,-14,69,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[190] = new State(new int[]{14,191});
    states[191] = new State(-100);
    states[192] = new State(-65);
    states[193] = new State(new int[]{39,40,27,124,45,194,41,94,11,127,47,-23,48,-23,49,-23,50,-23,51,-23,52,-23,53,-23,55,-23,56,-23,54,-23,57,-23,58,-23,59,-23,60,-23,31,-23},new int[]{-18,93});
    states[194] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80},new int[]{-15,195,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[195] = new State(new int[]{39,40,41,94,11,127,14,-40,47,-40,48,-40,49,-40,50,-40,51,-40,52,-40,53,-40,55,-40,56,-40,54,-40,57,-40,58,-40,59,-40,60,-40,12,-40,40,-40,42,-40,30,-40,31,-40,32,-40,13,-40,44,-40,36,-40},new int[]{-18,93});
    states[196] = new State(new int[]{32,197,29,109,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,36,-92},new int[]{-29,198,-37,108,-30,120,-17,121,-15,123,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188});
    states[197] = new State(-88);
    states[198] = new State(-90);
    states[199] = new State(-89);
    states[200] = new State(-87);
    states[201] = new State(-84);
    states[202] = new State(new int[]{29,203,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,36,-92},new int[]{-42,196,-30,199,-17,121,-15,123,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188});
    states[203] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91},new int[]{-7,204,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88});
    states[204] = new State(new int[]{30,205,47,11,48,13,49,15,50,17,51,19,52,21,53,23,55,25,56,27,54,29,57,31,58,33,59,35,60,37});
    states[205] = new State(new int[]{29,109,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,46,89,57,91,21,98,36,-92},new int[]{-28,206,-14,61,-29,192,-37,108,-30,120,-17,121,-15,193,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188,-7,46,-8,97});
    states[206] = new State(new int[]{29,109,5,49,6,50,7,51,8,52,9,53,10,54,4,56,41,66,43,71,39,80,34,170,33,175,23,178,37,183,38,186,25,189,31,-85,32,-85,36,-92},new int[]{-29,107,-37,108,-30,120,-17,121,-15,123,-16,47,-19,48,-5,130,-20,57,-21,65,-22,70,-23,79,-31,163,-4,164,-32,165,-43,166,-33,177,-34,182,-35,185,-36,188});
    states[207] = new State(new int[]{39,208});
    states[208] = new State(new int[]{5,49,6,50,7,51,8,52,9,53,10,54,4,56,29,58,41,66,43,71,39,80,46,89,57,91,21,98},new int[]{-14,209,-7,46,-15,39,-16,47,-19,48,-5,55,-20,57,-21,65,-22,70,-23,79,-17,88,-8,97});
    states[209] = new State(new int[]{40,210});
    states[210] = new State(-64);
    states[211] = new State(new int[]{12,212,40,-59});
    states[212] = new State(new int[]{4,56},new int[]{-27,213,-5,214});
    states[213] = new State(-61);
    states[214] = new State(new int[]{13,215});
    states[215] = new State(new int[]{15,133,16,134,17,135,18,136,19,137,20,138,21,140,39,147,41,153,43,157},new int[]{-9,216,-10,139,-11,146,-12,152,-13,156});
    states[216] = new State(-62);
    states[217] = new State(-60);
    states[218] = new State(-111);
    states[219] = new State(-108);
    states[220] = new State(-104);
    states[221] = new State(-6);
    states[222] = new State(new int[]{14,223});
    states[223] = new State(-7);
    states[224] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-3,-4});
    rules[5] = new Rule(-4, new int[]{-5,-6,28,-7,14});
    rules[6] = new Rule(-4, new int[]{-5,-6,28,-8});
    rules[7] = new Rule(-4, new int[]{-5,-6,28,26,14});
    rules[8] = new Rule(-5, new int[]{4});
    rules[9] = new Rule(-6, new int[]{});
    rules[10] = new Rule(-6, new int[]{13,-9});
    rules[11] = new Rule(-9, new int[]{15});
    rules[12] = new Rule(-9, new int[]{16});
    rules[13] = new Rule(-9, new int[]{17});
    rules[14] = new Rule(-9, new int[]{18});
    rules[15] = new Rule(-9, new int[]{19});
    rules[16] = new Rule(-9, new int[]{20});
    rules[17] = new Rule(-9, new int[]{-10});
    rules[18] = new Rule(-9, new int[]{-11});
    rules[19] = new Rule(-9, new int[]{-12});
    rules[20] = new Rule(-9, new int[]{-13});
    rules[21] = new Rule(-14, new int[]{-7});
    rules[22] = new Rule(-14, new int[]{-8});
    rules[23] = new Rule(-7, new int[]{-15});
    rules[24] = new Rule(-7, new int[]{46,-7});
    rules[25] = new Rule(-7, new int[]{-7,47,-7});
    rules[26] = new Rule(-7, new int[]{-7,48,-7});
    rules[27] = new Rule(-7, new int[]{-7,49,-7});
    rules[28] = new Rule(-7, new int[]{-7,50,-7});
    rules[29] = new Rule(-7, new int[]{-7,51,-7});
    rules[30] = new Rule(-7, new int[]{-7,52,-7});
    rules[31] = new Rule(-7, new int[]{-7,53,-7});
    rules[32] = new Rule(-7, new int[]{-7,55,-7});
    rules[33] = new Rule(-7, new int[]{-7,56,-7});
    rules[34] = new Rule(-7, new int[]{-7,54,-7});
    rules[35] = new Rule(-7, new int[]{-7,57,-7});
    rules[36] = new Rule(-7, new int[]{-7,58,-7});
    rules[37] = new Rule(-7, new int[]{-7,59,-7});
    rules[38] = new Rule(-7, new int[]{-7,60,-7});
    rules[39] = new Rule(-7, new int[]{57,-15});
    rules[40] = new Rule(-7, new int[]{-15,45,-15});
    rules[41] = new Rule(-15, new int[]{-16});
    rules[42] = new Rule(-15, new int[]{-17});
    rules[43] = new Rule(-15, new int[]{-15,-18});
    rules[44] = new Rule(-16, new int[]{-19});
    rules[45] = new Rule(-16, new int[]{-20});
    rules[46] = new Rule(-16, new int[]{-21});
    rules[47] = new Rule(-16, new int[]{-22});
    rules[48] = new Rule(-16, new int[]{-23});
    rules[49] = new Rule(-19, new int[]{5});
    rules[50] = new Rule(-19, new int[]{6});
    rules[51] = new Rule(-19, new int[]{7});
    rules[52] = new Rule(-19, new int[]{8});
    rules[53] = new Rule(-19, new int[]{9});
    rules[54] = new Rule(-19, new int[]{10});
    rules[55] = new Rule(-19, new int[]{-5});
    rules[56] = new Rule(-20, new int[]{29,-7,30,-14,31,-14,32});
    rules[57] = new Rule(-8, new int[]{21,39,-24,40,-6,-25});
    rules[58] = new Rule(-24, new int[]{});
    rules[59] = new Rule(-24, new int[]{-26});
    rules[60] = new Rule(-26, new int[]{-27});
    rules[61] = new Rule(-26, new int[]{-26,12,-27});
    rules[62] = new Rule(-27, new int[]{-5,13,-9});
    rules[63] = new Rule(-25, new int[]{22,-28,32});
    rules[64] = new Rule(-25, new int[]{24,39,-14,40});
    rules[65] = new Rule(-28, new int[]{-29});
    rules[66] = new Rule(-28, new int[]{-28,-29});
    rules[67] = new Rule(-30, new int[]{-17,14});
    rules[68] = new Rule(-30, new int[]{-31});
    rules[69] = new Rule(-30, new int[]{-4});
    rules[70] = new Rule(-30, new int[]{-32});
    rules[71] = new Rule(-30, new int[]{-33});
    rules[72] = new Rule(-30, new int[]{-34});
    rules[73] = new Rule(-30, new int[]{-35});
    rules[74] = new Rule(-30, new int[]{-36});
    rules[75] = new Rule(-29, new int[]{-37});
    rules[76] = new Rule(-29, new int[]{-30});
    rules[77] = new Rule(-17, new int[]{-15,39,-38,40});
    rules[78] = new Rule(-38, new int[]{});
    rules[79] = new Rule(-38, new int[]{-39});
    rules[80] = new Rule(-39, new int[]{-14});
    rules[81] = new Rule(-39, new int[]{-39,12,-14});
    rules[82] = new Rule(-31, new int[]{-15,27,-14,14});
    rules[83] = new Rule(-37, new int[]{29,-7,30,-28,-40,-41});
    rules[84] = new Rule(-37, new int[]{29,-7,30,-28,-41});
    rules[85] = new Rule(-40, new int[]{31,29,-7,30,-28});
    rules[86] = new Rule(-40, new int[]{-40,31,29,-7,30,-28});
    rules[87] = new Rule(-41, new int[]{32});
    rules[88] = new Rule(-41, new int[]{31,-42,32});
    rules[89] = new Rule(-42, new int[]{-30});
    rules[90] = new Rule(-42, new int[]{-42,-29});
    rules[91] = new Rule(-32, new int[]{-43,36,-28,32});
    rules[92] = new Rule(-43, new int[]{});
    rules[93] = new Rule(-43, new int[]{34,-5,35,-7});
    rules[94] = new Rule(-43, new int[]{34,-7});
    rules[95] = new Rule(-43, new int[]{33,-7});
    rules[96] = new Rule(-33, new int[]{23,14});
    rules[97] = new Rule(-33, new int[]{23,-14,14});
    rules[98] = new Rule(-34, new int[]{37,14});
    rules[99] = new Rule(-35, new int[]{38,14});
    rules[100] = new Rule(-36, new int[]{25,-38,14});
    rules[101] = new Rule(-21, new int[]{41,-38,42});
    rules[102] = new Rule(-22, new int[]{43,-44,44});
    rules[103] = new Rule(-44, new int[]{});
    rules[104] = new Rule(-44, new int[]{-45});
    rules[105] = new Rule(-44, new int[]{-44,12,-45});
    rules[106] = new Rule(-45, new int[]{-14,13,-14});
    rules[107] = new Rule(-23, new int[]{39,-46,40});
    rules[108] = new Rule(-46, new int[]{-47});
    rules[109] = new Rule(-46, new int[]{-46,12,-47});
    rules[110] = new Rule(-47, new int[]{-5,28,-14});
    rules[111] = new Rule(-47, new int[]{-14});
    rules[112] = new Rule(-18, new int[]{41,-14,42});
    rules[113] = new Rule(-18, new int[]{11,-5});
    rules[114] = new Rule(-18, new int[]{11,6});
    rules[115] = new Rule(-10, new int[]{21,39,-48,40,13,-9});
    rules[116] = new Rule(-48, new int[]{});
    rules[117] = new Rule(-48, new int[]{-9});
    rules[118] = new Rule(-48, new int[]{-48,12,-9});
    rules[119] = new Rule(-12, new int[]{41,-9,42});
    rules[120] = new Rule(-11, new int[]{39,-48,40});
    rules[121] = new Rule(-13, new int[]{43,-9,13,-9,44});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)ETokens.ERROR, (int)ETokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // starting -> dec_list, EOF
#line 32 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 3: // dec_list -> declaration
#line 36 "FParser/gppg/grammar.y"
                          { CurrentSemanticValue = new DeclarationStatementList((DeclarationStatement)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 4: // dec_list -> dec_list, declaration
#line 37 "FParser/gppg/grammar.y"
                                { ((DeclarationStatementList)ValueStack[ValueStack.Depth-2]).Add((DeclarationStatement)ValueStack[ValueStack.Depth-1]); ValueStack[ValueStack.Depth-2].Span = ValueStack[ValueStack.Depth-2].Span.MergeTo(ValueStack[ValueStack.Depth-1].Span); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 5: // declaration -> identifier, opt_type, IS, math_expr, SEMICOLON
#line 41 "FParser/gppg/grammar.y"
                                                { CurrentSemanticValue = new DeclarationStatement((Identifier)ValueStack[ValueStack.Depth-5], (FType)ValueStack[ValueStack.Depth-4], (FExpression)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-5].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 6: // declaration -> identifier, opt_type, IS, func_def
#line 42 "FParser/gppg/grammar.y"
                                        { CurrentSemanticValue = new DeclarationStatement((Identifier)ValueStack[ValueStack.Depth-4], (FType)ValueStack[ValueStack.Depth-3], (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-4].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 7: // declaration -> identifier, opt_type, IS, READ, SEMICOLON
#line 43 "FParser/gppg/grammar.y"
                                             { CurrentSemanticValue = new DeclarationStatement((Identifier)ValueStack[ValueStack.Depth-5], (FType)ValueStack[ValueStack.Depth-4], new ReadExpression((FType)ValueStack[ValueStack.Depth-4]), new TextSpan(ValueStack[ValueStack.Depth-5].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 8: // identifier -> ID
#line 47 "FParser/gppg/grammar.y"
                  { CurrentSemanticValue = new Identifier(((TokenValue)ValueStack[ValueStack.Depth-1])[0].ToString(), new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 9: // opt_type -> /* empty */
#line 51 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = null; }
#line default
        break;
      case 10: // opt_type -> COLON, type
#line 52 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 11: // type -> INTEGER
#line 56 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = new IntegerType(new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 12: // type -> COMPLEX
#line 57 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = new ComplexType(new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 13: // type -> RATIONAL
#line 58 "FParser/gppg/grammar.y"
                       { CurrentSemanticValue = new RationalType(new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 14: // type -> REAL
#line 59 "FParser/gppg/grammar.y"
                    { CurrentSemanticValue = new RealType(new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 15: // type -> STRING
#line 60 "FParser/gppg/grammar.y"
                     { CurrentSemanticValue = new StringType(new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 16: // type -> BOOLEAN
#line 61 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = new BooleanType(new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 17: // type -> func_type
#line 62 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 18: // type -> tuple_type
#line 63 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 19: // type -> array_type
#line 64 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 20: // type -> map_type
#line 65 "FParser/gppg/grammar.y"
                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 21: // expr -> math_expr
#line 69 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 22: // expr -> func_def
#line 70 "FParser/gppg/grammar.y"
                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 23: // math_expr -> secondary
#line 74 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 24: // math_expr -> NOT, math_expr
#line 75 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new NotExpression((FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 25: // math_expr -> math_expr, OR, math_expr
#line 76 "FParser/gppg/grammar.y"
                                 { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new OrOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 26: // math_expr -> math_expr, XOR, math_expr
#line 77 "FParser/gppg/grammar.y"
                                  { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new XorOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 27: // math_expr -> math_expr, AND, math_expr
#line 78 "FParser/gppg/grammar.y"
                                  { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new AndOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 28: // math_expr -> math_expr, LESS, math_expr
#line 79 "FParser/gppg/grammar.y"
                                   { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new LessOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 29: // math_expr -> math_expr, LESSEQUAL, math_expr
#line 80 "FParser/gppg/grammar.y"
                                       { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new LessEqualOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 30: // math_expr -> math_expr, GREATER, math_expr
#line 81 "FParser/gppg/grammar.y"
                                     { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new GreaterOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 31: // math_expr -> math_expr, GREATEREQUAL, math_expr
#line 82 "FParser/gppg/grammar.y"
                                         { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new GreaterEqualOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 32: // math_expr -> math_expr, NOTEQUAL, math_expr
#line 83 "FParser/gppg/grammar.y"
                                      { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new NotEqualOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 33: // math_expr -> math_expr, PLUS, math_expr
#line 84 "FParser/gppg/grammar.y"
                                   { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new PlusOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 34: // math_expr -> math_expr, EQUAL, math_expr
#line 85 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new EqualOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 35: // math_expr -> math_expr, MINUS, math_expr
#line 86 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new MinusOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 36: // math_expr -> math_expr, STAR, math_expr
#line 87 "FParser/gppg/grammar.y"
                                   { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new StarOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 37: // math_expr -> math_expr, SLASH, math_expr
#line 88 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new SlashOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 38: // math_expr -> math_expr, MODULO, math_expr
#line 89 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new ModuloOperator(ValueStack[ValueStack.Depth-2].Span), (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 39: // math_expr -> MINUS, secondary
#line 90 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new NegativeExpression((FSecondary)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-2].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 40: // math_expr -> secondary, ELLIPSIS, secondary
#line 91 "FParser/gppg/grammar.y"
                                       { CurrentSemanticValue = new EllipsisExpression((FSecondary)ValueStack[ValueStack.Depth-3], (FSecondary)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 41: // secondary -> primary
#line 95 "FParser/gppg/grammar.y"
                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 42: // secondary -> func_call
#line 96 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 43: // secondary -> secondary, indexer
#line 97 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new IndexedAccess((FSecondary)ValueStack[ValueStack.Depth-2], (Indexer)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-2].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 44: // primary -> value
#line 101 "FParser/gppg/grammar.y"
                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 45: // primary -> cond
#line 102 "FParser/gppg/grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 46: // primary -> array_def
#line 103 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 47: // primary -> map_def
#line 104 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 48: // primary -> tuple_def
#line 105 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 49: // value -> BOOLEAN_VALUE
#line 110 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new BooleanValue((bool) ((TokenValue)ValueStack[ValueStack.Depth-1])[0], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 50: // value -> INTEGER_VALUE
#line 111 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new IntegerValue((int) ((TokenValue)ValueStack[ValueStack.Depth-1])[0], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 51: // value -> REAL_VALUE
#line 112 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = new RealValue((double) ((TokenValue)ValueStack[ValueStack.Depth-1])[0], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 52: // value -> RATIONAL_VALUE
#line 113 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new RationalValue((int) ((TokenValue)ValueStack[ValueStack.Depth-1])[0], (int) ((TokenValue)ValueStack[ValueStack.Depth-1])[1], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 53: // value -> COMPLEX_VALUE
#line 114 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new ComplexValue((double) ((TokenValue)ValueStack[ValueStack.Depth-1])[0], (double) ((TokenValue)ValueStack[ValueStack.Depth-1])[1], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 54: // value -> STRING_VALUE
#line 115 "FParser/gppg/grammar.y"
                          { CurrentSemanticValue = new StringValue((string) ((TokenValue)ValueStack[ValueStack.Depth-1])[0], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 55: // value -> identifier
#line 116 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 56: // cond -> IF, math_expr, THEN, expr, ELSE, expr, END
#line 120 "FParser/gppg/grammar.y"
                                            { CurrentSemanticValue = new Conditional((FExpression)ValueStack[ValueStack.Depth-6], (FExpression)ValueStack[ValueStack.Depth-4], (FExpression)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-7].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 57: // func_def -> FUNC, LROUND, opt_params, RROUND, opt_type, func_body
#line 124 "FParser/gppg/grammar.y"
                                                     { CurrentSemanticValue = new FunctionDefinition((ParameterList)ValueStack[ValueStack.Depth-4], (FType)ValueStack[ValueStack.Depth-2], (StatementList)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-6].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 58: // opt_params -> /* empty */
#line 128 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = new ParameterList(); }
#line default
        break;
      case 59: // opt_params -> param_list
#line 129 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 60: // param_list -> param
#line 133 "FParser/gppg/grammar.y"
                     { CurrentSemanticValue = new ParameterList((Parameter)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 61: // param_list -> param_list, COMMA, param
#line 134 "FParser/gppg/grammar.y"
                                 { ((ParameterList)ValueStack[ValueStack.Depth-3]).parameters.Add((Parameter)ValueStack[ValueStack.Depth-1]); ValueStack[ValueStack.Depth-3].Span = ValueStack[ValueStack.Depth-3].Span.MergeTo(ValueStack[ValueStack.Depth-1].Span); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 62: // param -> identifier, COLON, type
#line 138 "FParser/gppg/grammar.y"
                                 { CurrentSemanticValue = new Parameter((Identifier)ValueStack[ValueStack.Depth-3], (FType)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 63: // func_body -> DO, stm_list, END
#line 142 "FParser/gppg/grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 64: // func_body -> ARROW, LROUND, expr, RROUND
#line 143 "FParser/gppg/grammar.y"
                                   { CurrentSemanticValue = new StatementList(new ExpressionStatement((FExpression)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-2].Span)), new TextSpan(ValueStack[ValueStack.Depth-4].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 65: // stm_list -> statement
#line 147 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = new StatementList((FStatement)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 66: // stm_list -> stm_list, statement
#line 148 "FParser/gppg/grammar.y"
                              { ((StatementList)ValueStack[ValueStack.Depth-2]).statements.Add((FStatement)ValueStack[ValueStack.Depth-1]); ValueStack[ValueStack.Depth-2].Span = ValueStack[ValueStack.Depth-2].Span.MergeTo(ValueStack[ValueStack.Depth-1].Span); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 67: // nif_stm -> func_call, SEMICOLON
#line 152 "FParser/gppg/grammar.y"
                               { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 68: // nif_stm -> assignment
#line 153 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 69: // nif_stm -> declaration
#line 154 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 70: // nif_stm -> loop_stm
#line 155 "FParser/gppg/grammar.y"
                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 71: // nif_stm -> return_stm
#line 156 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 72: // nif_stm -> break_stm
#line 157 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 73: // nif_stm -> cont_stm
#line 158 "FParser/gppg/grammar.y"
                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 74: // nif_stm -> print_stm
#line 159 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 75: // statement -> if_stm
#line 163 "FParser/gppg/grammar.y"
                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 76: // statement -> nif_stm
#line 164 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 77: // func_call -> secondary, LROUND, opt_exprs, RROUND
#line 168 "FParser/gppg/grammar.y"
                                          { CurrentSemanticValue = new FunctionCall((FSecondary)ValueStack[ValueStack.Depth-4], (ExpressionList)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-4].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 78: // opt_exprs -> /* empty */
#line 172 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = new ExpressionList(); }
#line default
        break;
      case 79: // opt_exprs -> expr_list
#line 173 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 80: // expr_list -> expr
#line 177 "FParser/gppg/grammar.y"
                    { CurrentSemanticValue = new ExpressionList((FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 81: // expr_list -> expr_list, COMMA, expr
#line 178 "FParser/gppg/grammar.y"
                                { ((ExpressionList)ValueStack[ValueStack.Depth-3]).expressions.Add((FExpression)ValueStack[ValueStack.Depth-1]); ValueStack[ValueStack.Depth-3].Span = ValueStack[ValueStack.Depth-3].Span.MergeTo(ValueStack[ValueStack.Depth-1].Span); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 82: // assignment -> secondary, ASSIGN, expr, SEMICOLON
#line 182 "FParser/gppg/grammar.y"
                                        { CurrentSemanticValue = new AssignmentStatement((FSecondary)ValueStack[ValueStack.Depth-4], (FExpression)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-4].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 83: // if_stm -> IF, math_expr, THEN, stm_list, e_if_list, opt_else
#line 186 "FParser/gppg/grammar.y"
                                                   { CurrentSemanticValue = new IfStatement((FExpression)ValueStack[ValueStack.Depth-5], (StatementList)ValueStack[ValueStack.Depth-3], (ElseIfList)ValueStack[ValueStack.Depth-2], (StatementList)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-6].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 84: // if_stm -> IF, math_expr, THEN, stm_list, opt_else
#line 187 "FParser/gppg/grammar.y"
                                           { CurrentSemanticValue = new IfStatement((FExpression)ValueStack[ValueStack.Depth-4], (StatementList)ValueStack[ValueStack.Depth-2], new ElseIfList(), (StatementList)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-5].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 85: // e_if_list -> ELSE, IF, math_expr, THEN, stm_list
#line 191 "FParser/gppg/grammar.y"
                                        { CurrentSemanticValue = new ElseIfList(new ElseIfStatement((FExpression) ValueStack[ValueStack.Depth-3], (StatementList) ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-5].Span, ValueStack[ValueStack.Depth-1].Span)), new TextSpan(ValueStack[ValueStack.Depth-5].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 86: // e_if_list -> e_if_list, ELSE, IF, math_expr, THEN, stm_list
#line 192 "FParser/gppg/grammar.y"
                                                { ((ElseIfList)(ValueStack[ValueStack.Depth-6])).Add(new ElseIfStatement((FExpression) ValueStack[ValueStack.Depth-3], (StatementList) ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-5].Span, ValueStack[ValueStack.Depth-1].Span))); ValueStack[ValueStack.Depth-6].Span = ValueStack[ValueStack.Depth-6].Span.MergeTo(ValueStack[ValueStack.Depth-1].Span); CurrentSemanticValue = ValueStack[ValueStack.Depth-6]; }
#line default
        break;
      case 87: // opt_else -> END
#line 196 "FParser/gppg/grammar.y"
                   { CurrentSemanticValue = new StatementList(new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 88: // opt_else -> ELSE, nif_stmlist, END
#line 197 "FParser/gppg/grammar.y"
                                { ValueStack[ValueStack.Depth-2].Span = new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 89: // nif_stmlist -> nif_stm
#line 201 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = new StatementList((FStatement)ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-1].Span); }
#line default
        break;
      case 90: // nif_stmlist -> nif_stmlist, statement
#line 202 "FParser/gppg/grammar.y"
                                 { ((StatementList)ValueStack[ValueStack.Depth-2]).Add((FStatement)ValueStack[ValueStack.Depth-1]); ValueStack[ValueStack.Depth-2].Span = ValueStack[ValueStack.Depth-2].Span.MergeTo(ValueStack[ValueStack.Depth-1].Span); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 91: // loop_stm -> loop_header, LOOP, stm_list, END
#line 206 "FParser/gppg/grammar.y"
                                       { CurrentSemanticValue = new LoopStatement(ValueStack[ValueStack.Depth-4] as FLoopHeader, (StatementList)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-4] != null ? ValueStack[ValueStack.Depth-4].Span : ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 92: // loop_header -> /* empty */
#line 210 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = null; }
#line default
        break;
      case 93: // loop_header -> FOR, identifier, IN, math_expr
#line 211 "FParser/gppg/grammar.y"
                                     { CurrentSemanticValue = new ForHeader((Identifier)ValueStack[ValueStack.Depth-3], (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-4].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 94: // loop_header -> FOR, math_expr
#line 212 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new ForHeader(null, (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-2].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 95: // loop_header -> WHILE, math_expr
#line 213 "FParser/gppg/grammar.y"
                            { CurrentSemanticValue = new WhileHeader((FExpression)ValueStack[ValueStack.Depth-1],new TextSpan(ValueStack[ValueStack.Depth-2].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 96: // return_stm -> RETURN, SEMICOLON
#line 217 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new ReturnStatement(new TextSpan(ValueStack[ValueStack.Depth-2].Span)); }
#line default
        break;
      case 97: // return_stm -> RETURN, expr, SEMICOLON
#line 218 "FParser/gppg/grammar.y"
                                 { CurrentSemanticValue = new ReturnStatement((FExpression)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-3].Span)); }
#line default
        break;
      case 98: // break_stm -> BREAK, SEMICOLON
#line 222 "FParser/gppg/grammar.y"
                            { CurrentSemanticValue = new BreakStatement(new TextSpan(ValueStack[ValueStack.Depth-2].Span)); }
#line default
        break;
      case 99: // cont_stm -> CONTINUE, SEMICOLON
#line 226 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new ContinueStatement(new TextSpan(ValueStack[ValueStack.Depth-2].Span)); }
#line default
        break;
      case 100: // print_stm -> PRINT, opt_exprs, SEMICOLON
#line 230 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new PrintStatement((ExpressionList)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 101: // array_def -> LSQUARE, opt_exprs, RSQUARE
#line 234 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new ArrayDefinition((ExpressionList)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 102: // map_def -> LCURLY, pair_list, RCURLY
#line 238 "FParser/gppg/grammar.y"
                                   { CurrentSemanticValue = new MapDefinition((ExpressionPairList)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 103: // pair_list -> /* empty */
#line 242 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = new ExpressionPairList(); }
#line default
        break;
      case 104: // pair_list -> pair
#line 243 "FParser/gppg/grammar.y"
                    { CurrentSemanticValue = new ExpressionPairList((ExpressionPair)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 105: // pair_list -> pair_list, COMMA, pair
#line 244 "FParser/gppg/grammar.y"
                                { ((ExpressionPairList)ValueStack[ValueStack.Depth-3]).pairs.Add((ExpressionPair)ValueStack[ValueStack.Depth-1]); ValueStack[ValueStack.Depth-3].Span = ValueStack[ValueStack.Depth-3].Span.MergeTo(ValueStack[ValueStack.Depth-1].Span); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 106: // pair -> expr, COLON, expr
#line 248 "FParser/gppg/grammar.y"
                            { CurrentSemanticValue = new ExpressionPair((FExpression)ValueStack[ValueStack.Depth-3], (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 107: // tuple_def -> LROUND, tuple_elist, RROUND
#line 252 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new TupleDefinition((TupleElementList)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 108: // tuple_elist -> tuple_elem
#line 256 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = new TupleElementList((TupleElement)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 109: // tuple_elist -> tuple_elist, COMMA, tuple_elem
#line 257 "FParser/gppg/grammar.y"
                                      { ((TupleElementList)ValueStack[ValueStack.Depth-3]).Add((TupleElement)ValueStack[ValueStack.Depth-1]); ValueStack[ValueStack.Depth-3].Span = ValueStack[ValueStack.Depth-3].Span.MergeTo(ValueStack[ValueStack.Depth-1].Span); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 110: // tuple_elem -> identifier, IS, expr
#line 261 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new TupleElement((Identifier)ValueStack[ValueStack.Depth-3], (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 111: // tuple_elem -> expr
#line 262 "FParser/gppg/grammar.y"
                    { CurrentSemanticValue = new TupleElement(null, (FExpression)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 112: // indexer -> LSQUARE, expr, RSQUARE
#line 266 "FParser/gppg/grammar.y"
                                { CurrentSemanticValue = new SquaresIndexer((FExpression)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 113: // indexer -> DOT, identifier
#line 267 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new DotIndexer((Identifier)ValueStack[ValueStack.Depth-1], null, new TextSpan(ValueStack[ValueStack.Depth-2].Span, ValueStack[ValueStack.Depth-1].Span));}
#line default
        break;
      case 114: // indexer -> DOT, INTEGER_VALUE
#line 268 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new DotIndexer(null, new IntegerValue((int)((TokenValue)ValueStack[ValueStack.Depth-1])[0], ValueStack[ValueStack.Depth-1].Span), new TextSpan(ValueStack[ValueStack.Depth-2].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 115: // func_type -> FUNC, LROUND, type_list, RROUND, COLON, type
#line 272 "FParser/gppg/grammar.y"
                                               { CurrentSemanticValue = new FunctionType((TypeList)ValueStack[ValueStack.Depth-4], (FType)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-6].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 116: // type_list -> /* empty */
#line 276 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = new TypeList(); }
#line default
        break;
      case 117: // type_list -> type
#line 277 "FParser/gppg/grammar.y"
                    { CurrentSemanticValue = new TypeList((FType)ValueStack[ValueStack.Depth-1], new TextSpan(ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 118: // type_list -> type_list, COMMA, type
#line 278 "FParser/gppg/grammar.y"
                                { ((TypeList)ValueStack[ValueStack.Depth-3]).types.Add((FType)ValueStack[ValueStack.Depth-1]); ValueStack[ValueStack.Depth-3].Span = ValueStack[ValueStack.Depth-3].Span.MergeTo(ValueStack[ValueStack.Depth-1].Span); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 119: // array_type -> LSQUARE, type, RSQUARE
#line 282 "FParser/gppg/grammar.y"
                                 { CurrentSemanticValue = new ArrayType((FType)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 120: // tuple_type -> LROUND, type_list, RROUND
#line 286 "FParser/gppg/grammar.y"
                                  { CurrentSemanticValue = new TupleType((TypeList)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-3].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
      case 121: // map_type -> LCURLY, type, COLON, type, RCURLY
#line 290 "FParser/gppg/grammar.y"
                                       { CurrentSemanticValue = new MapType((FType)ValueStack[ValueStack.Depth-4], (FType)ValueStack[ValueStack.Depth-2], new TextSpan(ValueStack[ValueStack.Depth-5].Span, ValueStack[ValueStack.Depth-1].Span)); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((ETokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((ETokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
