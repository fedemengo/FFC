// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  filo-Spin-SP513
// DateTime: 6/2/2018 6:05:40 PM
// UserName: filo
// Input file <FParser/gppg/grammar.y - 6/2/2018 6:05:37 PM>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using FFC.FAST;
using FFC.FLexer;

namespace FFC.FParser
{
internal enum ETokens {error=2,EOF=3,ID=4,BOOLEAN_VALUE=5,INTEGER_VALUE=6,
    REAL_VALUE=7,RATIONAL_VALUE=8,COMPLEX_VALUE=9,STRING_VALUE=10,DOT=11,COMMA=12,
    COLON=13,SEMICOLON=14,STAR=15,SLASH=16,PLUS=17,MINUS=18,
    INTEGER=19,COMPLEX=20,RATIONAL=21,REAL=22,STRING=23,BOOLEAN=24,
    ASSIGN=25,ARROW=26,LESS=27,LESSEQUAL=28,GREATER=29,GREATEREQUAL=30,
    EQUAL=31,NOTEQUAL=32,AND=33,OR=34,XOR=35,FUNC=36,
    DO=37,RETURN=38,PRINT=39,IS=40,IF=41,THEN=42,
    ELSE=43,END=44,WHILE=45,FOR=46,IN=47,LOOP=48,
    BREAK=49,CONTINUE=50,LROUND=51,RROUND=52,LSQUARE=53,RSQUARE=54,
    LCURLY=55,RCURLY=56,ELLIPSIS=57,NEG=58};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<TValue, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[109];
  private static State[] states = new State[204];
  private static string[] nonTerms = new string[] {
      "starting", "$accept", "dec_list", "declaration", "opt_type", "expr", "type", 
      "func_type", "tuple_type", "array_type", "map_type", "secondary", "primary", 
      "func_call", "indexer", "value", "cond", "func_def", "array_def", "map_def", 
      "tuple_def", "opt_params", "func_body", "param_list", "param", "stm_list", 
      "statement", "assignment", "if_stm", "loop_stm", "return_stm", "break_stm", 
      "cont_stm", "print_stm", "opt_exprs", "expr_list", "loop_header", "pair_list", 
      "pair", "tuple_elist", "tuple_elem", "type_list", };

  static Parser() {
    states[0] = new State(new int[]{4,6},new int[]{-1,1,-3,3,-4,203});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,4,4,6},new int[]{-4,5});
    states[4] = new State(-2);
    states[5] = new State(-4);
    states[6] = new State(new int[]{13,90,40,-6},new int[]{-5,7});
    states[7] = new State(new int[]{40,8});
    states[8] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,9,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[9] = new State(new int[]{14,10});
    states[10] = new State(-5);
    states[11] = new State(new int[]{51,12,27,164,28,166,29,168,30,170,31,172,32,174,33,176,34,178,35,180,17,182,18,184,15,186,16,188,57,190,53,80,11,83,14,-18,12,-18,52,-18,54,-18,42,-18,43,-18,44,-18,13,-18,56,-18,48,-18},new int[]{-15,49});
    states[12] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77,52,-71},new int[]{-35,13,-36,15,-6,57,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[13] = new State(new int[]{52,14});
    states[14] = new State(-70);
    states[15] = new State(new int[]{12,16,52,-72,54,-72});
    states[16] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,17,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[17] = new State(-74);
    states[18] = new State(-34);
    states[19] = new State(-37);
    states[20] = new State(-43);
    states[21] = new State(-44);
    states[22] = new State(-45);
    states[23] = new State(-46);
    states[24] = new State(-47);
    states[25] = new State(-48);
    states[26] = new State(-49);
    states[27] = new State(-38);
    states[28] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,29,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[29] = new State(new int[]{42,30});
    states[30] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,31,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[31] = new State(new int[]{43,32});
    states[32] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,33,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[33] = new State(new int[]{44,34});
    states[34] = new State(-50);
    states[35] = new State(-39);
    states[36] = new State(new int[]{51,37});
    states[37] = new State(new int[]{4,199,52,-52},new int[]{-22,38,-24,196,-25,202});
    states[38] = new State(new int[]{52,39});
    states[39] = new State(new int[]{13,90,37,-6,26,-6},new int[]{-5,40});
    states[40] = new State(new int[]{37,42,26,192},new int[]{-23,41});
    states[41] = new State(-51);
    states[42] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,89,41,122,36,36,53,54,55,59,51,68,46,138,45,143,38,146,49,151,50,154,39,157,48,-79},new int[]{-26,43,-27,162,-14,46,-12,48,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-28,130,-4,131,-29,132,-30,133,-37,134,-31,145,-32,150,-33,153,-34,156});
    states[43] = new State(new int[]{44,44,5,20,6,21,7,22,8,23,9,24,10,25,4,89,41,122,36,36,53,54,55,59,51,68,46,138,45,143,38,146,49,151,50,154,39,157,48,-79},new int[]{-27,45,-14,46,-12,48,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-28,130,-4,131,-29,132,-30,133,-37,134,-31,145,-32,150,-33,153,-34,156});
    states[44] = new State(-57);
    states[45] = new State(-60);
    states[46] = new State(new int[]{14,47,51,-35,25,-35,53,-35,11,-35,27,-35,28,-35,29,-35,30,-35,31,-35,32,-35,33,-35,34,-35,35,-35,17,-35,18,-35,15,-35,16,-35,57,-35,43,-35});
    states[47] = new State(-61);
    states[48] = new State(new int[]{51,12,25,50,53,80,11,83},new int[]{-15,49});
    states[49] = new State(-36);
    states[50] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,51,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[51] = new State(new int[]{14,52});
    states[52] = new State(-75);
    states[53] = new State(-40);
    states[54] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77,54,-71},new int[]{-35,55,-36,15,-6,57,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[55] = new State(new int[]{54,56});
    states[56] = new State(-88);
    states[57] = new State(-73);
    states[58] = new State(-41);
    states[59] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77,56,-90,12,-90},new int[]{-38,60,-39,88,-6,64,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[60] = new State(new int[]{56,61,12,62});
    states[61] = new State(-89);
    states[62] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-39,63,-6,64,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[63] = new State(-92);
    states[64] = new State(new int[]{13,65});
    states[65] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,66,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[66] = new State(-93);
    states[67] = new State(-42);
    states[68] = new State(new int[]{4,73,5,20,6,21,7,22,8,23,9,24,10,25,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-40,69,-41,87,-6,86,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[69] = new State(new int[]{52,70,12,71});
    states[70] = new State(-94);
    states[71] = new State(new int[]{4,73,5,20,6,21,7,22,8,23,9,24,10,25,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-41,72,-6,86,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[72] = new State(-96);
    states[73] = new State(new int[]{40,74,51,-49,27,-49,28,-49,29,-49,30,-49,31,-49,32,-49,33,-49,34,-49,35,-49,17,-49,18,-49,15,-49,16,-49,57,-49,53,-49,11,-49,52,-49,12,-49});
    states[74] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,75,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[75] = new State(-97);
    states[76] = new State(-35);
    states[77] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68},new int[]{-12,78,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[78] = new State(new int[]{58,79,51,12,53,80,11,83},new int[]{-15,49});
    states[79] = new State(-32);
    states[80] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,81,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[81] = new State(new int[]{54,82});
    states[82] = new State(-99);
    states[83] = new State(new int[]{4,84,6,85});
    states[84] = new State(-100);
    states[85] = new State(-101);
    states[86] = new State(-98);
    states[87] = new State(-95);
    states[88] = new State(-91);
    states[89] = new State(new int[]{13,90,51,-49,25,-49,53,-49,11,-49,27,-49,28,-49,29,-49,30,-49,31,-49,32,-49,33,-49,34,-49,35,-49,17,-49,18,-49,15,-49,16,-49,57,-49,43,-49,40,-6},new int[]{-5,7});
    states[90] = new State(new int[]{19,92,20,93,21,94,22,95,23,96,24,97,36,99,51,106,53,112,55,116},new int[]{-7,91,-8,98,-9,105,-10,111,-11,115});
    states[91] = new State(-7);
    states[92] = new State(-8);
    states[93] = new State(-9);
    states[94] = new State(-10);
    states[95] = new State(-11);
    states[96] = new State(-12);
    states[97] = new State(-13);
    states[98] = new State(-14);
    states[99] = new State(new int[]{51,100});
    states[100] = new State(new int[]{19,92,20,93,21,94,22,95,23,96,24,97,36,99,51,106,53,112,55,116,52,-103,12,-103},new int[]{-42,101,-7,121,-8,98,-9,105,-10,111,-11,115});
    states[101] = new State(new int[]{52,102,12,109});
    states[102] = new State(new int[]{13,103});
    states[103] = new State(new int[]{19,92,20,93,21,94,22,95,23,96,24,97,36,99,51,106,53,112,55,116},new int[]{-7,104,-8,98,-9,105,-10,111,-11,115});
    states[104] = new State(-102);
    states[105] = new State(-15);
    states[106] = new State(new int[]{19,92,20,93,21,94,22,95,23,96,24,97,36,99,51,106,53,112,55,116,52,-103,12,-103},new int[]{-42,107,-7,121,-8,98,-9,105,-10,111,-11,115});
    states[107] = new State(new int[]{52,108,12,109});
    states[108] = new State(-107);
    states[109] = new State(new int[]{19,92,20,93,21,94,22,95,23,96,24,97,36,99,51,106,53,112,55,116},new int[]{-7,110,-8,98,-9,105,-10,111,-11,115});
    states[110] = new State(-105);
    states[111] = new State(-16);
    states[112] = new State(new int[]{19,92,20,93,21,94,22,95,23,96,24,97,36,99,51,106,53,112,55,116},new int[]{-7,113,-8,98,-9,105,-10,111,-11,115});
    states[113] = new State(new int[]{54,114});
    states[114] = new State(-106);
    states[115] = new State(-17);
    states[116] = new State(new int[]{19,92,20,93,21,94,22,95,23,96,24,97,36,99,51,106,53,112,55,116},new int[]{-7,117,-8,98,-9,105,-10,111,-11,115});
    states[117] = new State(new int[]{13,118});
    states[118] = new State(new int[]{19,92,20,93,21,94,22,95,23,96,24,97,36,99,51,106,53,112,55,116},new int[]{-7,119,-8,98,-9,105,-10,111,-11,115});
    states[119] = new State(new int[]{56,120});
    states[120] = new State(-108);
    states[121] = new State(-104);
    states[122] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,123,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[123] = new State(new int[]{42,124});
    states[124] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,89,41,122,36,36,53,54,55,59,51,68,18,77,46,138,45,143,38,146,49,151,50,154,39,157,48,-79},new int[]{-6,31,-26,125,-12,163,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,46,-27,162,-28,130,-4,131,-29,132,-30,133,-37,134,-31,145,-32,150,-33,153,-34,156});
    states[125] = new State(new int[]{44,126,43,127,5,20,6,21,7,22,8,23,9,24,10,25,4,89,41,122,36,36,53,54,55,59,51,68,46,138,45,143,38,146,49,151,50,154,39,157,48,-79},new int[]{-27,45,-14,46,-12,48,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-28,130,-4,131,-29,132,-30,133,-37,134,-31,145,-32,150,-33,153,-34,156});
    states[126] = new State(-76);
    states[127] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,89,41,122,36,36,53,54,55,59,51,68,46,138,45,143,38,146,49,151,50,154,39,157,48,-79},new int[]{-26,128,-27,162,-14,46,-12,48,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-28,130,-4,131,-29,132,-30,133,-37,134,-31,145,-32,150,-33,153,-34,156});
    states[128] = new State(new int[]{44,129,5,20,6,21,7,22,8,23,9,24,10,25,4,89,41,122,36,36,53,54,55,59,51,68,46,138,45,143,38,146,49,151,50,154,39,157,48,-79},new int[]{-27,45,-14,46,-12,48,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-28,130,-4,131,-29,132,-30,133,-37,134,-31,145,-32,150,-33,153,-34,156});
    states[129] = new State(-77);
    states[130] = new State(-62);
    states[131] = new State(-63);
    states[132] = new State(-64);
    states[133] = new State(-65);
    states[134] = new State(new int[]{48,135});
    states[135] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,89,41,122,36,36,53,54,55,59,51,68,46,138,45,143,38,146,49,151,50,154,39,157,48,-79},new int[]{-26,136,-27,162,-14,46,-12,48,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-28,130,-4,131,-29,132,-30,133,-37,134,-31,145,-32,150,-33,153,-34,156});
    states[136] = new State(new int[]{44,137,5,20,6,21,7,22,8,23,9,24,10,25,4,89,41,122,36,36,53,54,55,59,51,68,46,138,45,143,38,146,49,151,50,154,39,157,48,-79},new int[]{-27,45,-14,46,-12,48,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-28,130,-4,131,-29,132,-30,133,-37,134,-31,145,-32,150,-33,153,-34,156});
    states[137] = new State(-78);
    states[138] = new State(new int[]{4,139,5,20,6,21,7,22,8,23,9,24,10,25,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,142,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[139] = new State(new int[]{47,140,51,-49,27,-49,28,-49,29,-49,30,-49,31,-49,32,-49,33,-49,34,-49,35,-49,17,-49,18,-49,15,-49,16,-49,57,-49,53,-49,11,-49,48,-49});
    states[140] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,141,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[141] = new State(-80);
    states[142] = new State(-81);
    states[143] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,144,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[144] = new State(-82);
    states[145] = new State(-66);
    states[146] = new State(new int[]{14,147,5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,148,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[147] = new State(-83);
    states[148] = new State(new int[]{14,149});
    states[149] = new State(-84);
    states[150] = new State(-67);
    states[151] = new State(new int[]{14,152});
    states[152] = new State(-85);
    states[153] = new State(-68);
    states[154] = new State(new int[]{14,155});
    states[155] = new State(-86);
    states[156] = new State(-69);
    states[157] = new State(new int[]{51,158});
    states[158] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77,52,-71},new int[]{-35,159,-36,15,-6,57,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[159] = new State(new int[]{52,160});
    states[160] = new State(new int[]{14,161});
    states[161] = new State(-87);
    states[162] = new State(-59);
    states[163] = new State(new int[]{51,12,27,164,28,166,29,168,30,170,31,172,32,174,33,176,34,178,35,180,17,182,18,184,15,186,16,188,57,190,25,50,53,80,11,83,43,-18},new int[]{-15,49});
    states[164] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,165,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[165] = new State(-19);
    states[166] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,167,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[167] = new State(-20);
    states[168] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,169,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[169] = new State(-21);
    states[170] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,171,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[171] = new State(-22);
    states[172] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,173,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[173] = new State(-23);
    states[174] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,175,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[175] = new State(-24);
    states[176] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,177,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[177] = new State(-25);
    states[178] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,179,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[179] = new State(-26);
    states[180] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,181,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[181] = new State(-27);
    states[182] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,183,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[183] = new State(-28);
    states[184] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,185,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[185] = new State(-29);
    states[186] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,187,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[187] = new State(-30);
    states[188] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,189,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[189] = new State(-31);
    states[190] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68},new int[]{-12,191,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[191] = new State(new int[]{51,12,53,80,11,83,14,-33,12,-33,52,-33,54,-33,42,-33,43,-33,44,-33,13,-33,56,-33,48,-33},new int[]{-15,49});
    states[192] = new State(new int[]{51,193});
    states[193] = new State(new int[]{5,20,6,21,7,22,8,23,9,24,10,25,4,26,41,28,36,36,53,54,55,59,51,68,18,77},new int[]{-6,194,-12,11,-13,18,-16,19,-17,27,-18,35,-19,53,-20,58,-21,67,-14,76});
    states[194] = new State(new int[]{52,195});
    states[195] = new State(-58);
    states[196] = new State(new int[]{12,197,52,-53});
    states[197] = new State(new int[]{4,199},new int[]{-25,198});
    states[198] = new State(-55);
    states[199] = new State(new int[]{13,200});
    states[200] = new State(new int[]{19,92,20,93,21,94,22,95,23,96,24,97,36,99,51,106,53,112,55,116},new int[]{-7,201,-8,98,-9,105,-10,111,-11,115});
    states[201] = new State(-56);
    states[202] = new State(-54);
    states[203] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-3,-4});
    rules[5] = new Rule(-4, new int[]{4,-5,40,-6,14});
    rules[6] = new Rule(-5, new int[]{});
    rules[7] = new Rule(-5, new int[]{13,-7});
    rules[8] = new Rule(-7, new int[]{19});
    rules[9] = new Rule(-7, new int[]{20});
    rules[10] = new Rule(-7, new int[]{21});
    rules[11] = new Rule(-7, new int[]{22});
    rules[12] = new Rule(-7, new int[]{23});
    rules[13] = new Rule(-7, new int[]{24});
    rules[14] = new Rule(-7, new int[]{-8});
    rules[15] = new Rule(-7, new int[]{-9});
    rules[16] = new Rule(-7, new int[]{-10});
    rules[17] = new Rule(-7, new int[]{-11});
    rules[18] = new Rule(-6, new int[]{-12});
    rules[19] = new Rule(-6, new int[]{-12,27,-6});
    rules[20] = new Rule(-6, new int[]{-12,28,-6});
    rules[21] = new Rule(-6, new int[]{-12,29,-6});
    rules[22] = new Rule(-6, new int[]{-12,30,-6});
    rules[23] = new Rule(-6, new int[]{-12,31,-6});
    rules[24] = new Rule(-6, new int[]{-12,32,-6});
    rules[25] = new Rule(-6, new int[]{-12,33,-6});
    rules[26] = new Rule(-6, new int[]{-12,34,-6});
    rules[27] = new Rule(-6, new int[]{-12,35,-6});
    rules[28] = new Rule(-6, new int[]{-12,17,-6});
    rules[29] = new Rule(-6, new int[]{-12,18,-6});
    rules[30] = new Rule(-6, new int[]{-12,15,-6});
    rules[31] = new Rule(-6, new int[]{-12,16,-6});
    rules[32] = new Rule(-6, new int[]{18,-12,58});
    rules[33] = new Rule(-6, new int[]{-12,57,-12});
    rules[34] = new Rule(-12, new int[]{-13});
    rules[35] = new Rule(-12, new int[]{-14});
    rules[36] = new Rule(-12, new int[]{-12,-15});
    rules[37] = new Rule(-13, new int[]{-16});
    rules[38] = new Rule(-13, new int[]{-17});
    rules[39] = new Rule(-13, new int[]{-18});
    rules[40] = new Rule(-13, new int[]{-19});
    rules[41] = new Rule(-13, new int[]{-20});
    rules[42] = new Rule(-13, new int[]{-21});
    rules[43] = new Rule(-16, new int[]{5});
    rules[44] = new Rule(-16, new int[]{6});
    rules[45] = new Rule(-16, new int[]{7});
    rules[46] = new Rule(-16, new int[]{8});
    rules[47] = new Rule(-16, new int[]{9});
    rules[48] = new Rule(-16, new int[]{10});
    rules[49] = new Rule(-16, new int[]{4});
    rules[50] = new Rule(-17, new int[]{41,-6,42,-6,43,-6,44});
    rules[51] = new Rule(-18, new int[]{36,51,-22,52,-5,-23});
    rules[52] = new Rule(-22, new int[]{});
    rules[53] = new Rule(-22, new int[]{-24});
    rules[54] = new Rule(-24, new int[]{-25});
    rules[55] = new Rule(-24, new int[]{-24,12,-25});
    rules[56] = new Rule(-25, new int[]{4,13,-7});
    rules[57] = new Rule(-23, new int[]{37,-26,44});
    rules[58] = new Rule(-23, new int[]{26,51,-6,52});
    rules[59] = new Rule(-26, new int[]{-27});
    rules[60] = new Rule(-26, new int[]{-26,-27});
    rules[61] = new Rule(-27, new int[]{-14,14});
    rules[62] = new Rule(-27, new int[]{-28});
    rules[63] = new Rule(-27, new int[]{-4});
    rules[64] = new Rule(-27, new int[]{-29});
    rules[65] = new Rule(-27, new int[]{-30});
    rules[66] = new Rule(-27, new int[]{-31});
    rules[67] = new Rule(-27, new int[]{-32});
    rules[68] = new Rule(-27, new int[]{-33});
    rules[69] = new Rule(-27, new int[]{-34});
    rules[70] = new Rule(-14, new int[]{-12,51,-35,52});
    rules[71] = new Rule(-35, new int[]{});
    rules[72] = new Rule(-35, new int[]{-36});
    rules[73] = new Rule(-36, new int[]{-6});
    rules[74] = new Rule(-36, new int[]{-36,12,-6});
    rules[75] = new Rule(-28, new int[]{-12,25,-6,14});
    rules[76] = new Rule(-29, new int[]{41,-6,42,-26,44});
    rules[77] = new Rule(-29, new int[]{41,-6,42,-26,43,-26,44});
    rules[78] = new Rule(-30, new int[]{-37,48,-26,44});
    rules[79] = new Rule(-37, new int[]{});
    rules[80] = new Rule(-37, new int[]{46,4,47,-6});
    rules[81] = new Rule(-37, new int[]{46,-6});
    rules[82] = new Rule(-37, new int[]{45,-6});
    rules[83] = new Rule(-31, new int[]{38,14});
    rules[84] = new Rule(-31, new int[]{38,-6,14});
    rules[85] = new Rule(-32, new int[]{49,14});
    rules[86] = new Rule(-33, new int[]{50,14});
    rules[87] = new Rule(-34, new int[]{39,51,-35,52,14});
    rules[88] = new Rule(-19, new int[]{53,-35,54});
    rules[89] = new Rule(-20, new int[]{55,-38,56});
    rules[90] = new Rule(-38, new int[]{});
    rules[91] = new Rule(-38, new int[]{-39});
    rules[92] = new Rule(-38, new int[]{-38,12,-39});
    rules[93] = new Rule(-39, new int[]{-6,13,-6});
    rules[94] = new Rule(-21, new int[]{51,-40,52});
    rules[95] = new Rule(-40, new int[]{-41});
    rules[96] = new Rule(-40, new int[]{-40,12,-41});
    rules[97] = new Rule(-41, new int[]{4,40,-6});
    rules[98] = new Rule(-41, new int[]{-6});
    rules[99] = new Rule(-15, new int[]{53,-6,54});
    rules[100] = new Rule(-15, new int[]{11,4});
    rules[101] = new Rule(-15, new int[]{11,6});
    rules[102] = new Rule(-8, new int[]{36,51,-42,52,13,-7});
    rules[103] = new Rule(-42, new int[]{});
    rules[104] = new Rule(-42, new int[]{-7});
    rules[105] = new Rule(-42, new int[]{-42,12,-7});
    rules[106] = new Rule(-10, new int[]{53,-7,54});
    rules[107] = new Rule(-9, new int[]{51,-42,52});
    rules[108] = new Rule(-11, new int[]{55,-7,13,-7,56});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)ETokens.error, (int)ETokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // starting -> dec_list, EOF
#line 41 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 3: // dec_list -> declaration
#line 44 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = new DeclarationStatementList((DeclarationStatement)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 4: // dec_list -> dec_list, declaration
#line 45 "FParser/gppg/grammar.y"
                           { ((DeclarationStatementList)ValueStack[ValueStack.Depth-2]).statements.Add((DeclarationStatement)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 5: // declaration -> ID, opt_type, IS, expr, SEMICOLON
#line 48 "FParser/gppg/grammar.y"
                                            { CurrentSemanticValue = new DeclarationStatement(new Identifier((Token)ValueStack[ValueStack.Depth-5].values[0]), (FExpression)ValueStack[ValueStack.Depth-4], (FExpression)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 6: // opt_type -> /* empty */
#line 51 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = null; }
#line default
        break;
      case 7: // opt_type -> COLON, type
#line 52 "FParser/gppg/grammar.y"
                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 8: // type -> INTEGER
#line 55 "FParser/gppg/grammar.y"
                  { CurrentSemanticValue = new IntegerType(); }
#line default
        break;
      case 9: // type -> COMPLEX
#line 56 "FParser/gppg/grammar.y"
               { CurrentSemanticValue = new ComplexType(); }
#line default
        break;
      case 10: // type -> RATIONAL
#line 57 "FParser/gppg/grammar.y"
               { CurrentSemanticValue = new RationalType(); }
#line default
        break;
      case 11: // type -> REAL
#line 58 "FParser/gppg/grammar.y"
            { CurrentSemanticValue = new RealType(); }
#line default
        break;
      case 12: // type -> STRING
#line 59 "FParser/gppg/grammar.y"
              { CurrentSemanticValue = new StringType(); }
#line default
        break;
      case 13: // type -> BOOLEAN
#line 60 "FParser/gppg/grammar.y"
               { CurrentSemanticValue = new BooleanType(); }
#line default
        break;
      case 14: // type -> func_type
#line 61 "FParser/gppg/grammar.y"
                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 15: // type -> tuple_type
#line 62 "FParser/gppg/grammar.y"
                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 16: // type -> array_type
#line 63 "FParser/gppg/grammar.y"
                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 17: // type -> map_type
#line 64 "FParser/gppg/grammar.y"
               { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 18: // expr -> secondary
#line 67 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 19: // expr -> secondary, LESS, expr
#line 68 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new LessOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 20: // expr -> secondary, LESSEQUAL, expr
#line 69 "FParser/gppg/grammar.y"
                                { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new LessEqualOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 21: // expr -> secondary, GREATER, expr
#line 70 "FParser/gppg/grammar.y"
                               { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new GreaterOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 22: // expr -> secondary, GREATEREQUAL, expr
#line 71 "FParser/gppg/grammar.y"
                                   { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new GreaterEqualOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 23: // expr -> secondary, EQUAL, expr
#line 72 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new EqualOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 24: // expr -> secondary, NOTEQUAL, expr
#line 73 "FParser/gppg/grammar.y"
                                { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new NotEqualOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 25: // expr -> secondary, AND, expr
#line 74 "FParser/gppg/grammar.y"
                            { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new AndOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 26: // expr -> secondary, OR, expr
#line 75 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new OrOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 27: // expr -> secondary, XOR, expr
#line 76 "FParser/gppg/grammar.y"
                            { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new XorOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 28: // expr -> secondary, PLUS, expr
#line 77 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new PlusOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 29: // expr -> secondary, MINUS, expr
#line 78 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new MinusOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 30: // expr -> secondary, STAR, expr
#line 79 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new StarOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 31: // expr -> secondary, SLASH, expr
#line 80 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new BinaryOperatorExpression(ValueStack[ValueStack.Depth-3], new SlashOperator(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 32: // expr -> MINUS, secondary, NEG
#line 81 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new NegativeExpression(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 33: // expr -> secondary, ELLIPSIS, secondary
#line 82 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new EllipsisExpression(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 34: // secondary -> primary
#line 85 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 35: // secondary -> func_call
#line 86 "FParser/gppg/grammar.y"
                   { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 36: // secondary -> secondary, indexer
#line 87 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = new IndexedAccess(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 37: // primary -> value
#line 90 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 38: // primary -> cond
#line 91 "FParser/gppg/grammar.y"
              { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 39: // primary -> func_def
#line 92 "FParser/gppg/grammar.y"
                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 40: // primary -> array_def
#line 93 "FParser/gppg/grammar.y"
                  { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 41: // primary -> map_def
#line 94 "FParser/gppg/grammar.y"
                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 42: // primary -> tuple_def
#line 95 "FParser/gppg/grammar.y"
                  { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 43: // value -> BOOLEAN_VALUE
#line 99 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = new BooleanValue((bool) ValueStack[ValueStack.Depth-1].values[0]); }
#line default
        break;
      case 44: // value -> INTEGER_VALUE
#line 100 "FParser/gppg/grammar.y"
                     { CurrentSemanticValue = new IntegerValue((int) ValueStack[ValueStack.Depth-1].values[0]); }
#line default
        break;
      case 45: // value -> REAL_VALUE
#line 101 "FParser/gppg/grammar.y"
                   { CurrentSemanticValue = new RealValue((double) ValueStack[ValueStack.Depth-1].values[0]); }
#line default
        break;
      case 46: // value -> RATIONAL_VALUE
#line 102 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = new RationalValue((int) ValueStack[ValueStack.Depth-1].values[0], (int) ValueStack[ValueStack.Depth-1].values[1]); }
#line default
        break;
      case 47: // value -> COMPLEX_VALUE
#line 103 "FParser/gppg/grammar.y"
                     { CurrentSemanticValue = new ComplexValue((double) ValueStack[ValueStack.Depth-1].values[0], (double) ValueStack[ValueStack.Depth-1].values[1]); }
#line default
        break;
      case 48: // value -> STRING_VALUE
#line 104 "FParser/gppg/grammar.y"
                    { CurrentSemanticValue = new StringValue((string) ValueStack[ValueStack.Depth-1].values[0]); }
#line default
        break;
      case 49: // value -> ID
#line 105 "FParser/gppg/grammar.y"
             { CurrentSemanticValue = new Identifier((string) ValueStack[ValueStack.Depth-1].values[0]); }
#line default
        break;
      case 50: // cond -> IF, expr, THEN, expr, ELSE, expr, END
#line 108 "FParser/gppg/grammar.y"
                                         { CurrentSemanticValue = new Conditional(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 51: // func_def -> FUNC, LROUND, opt_params, RROUND, opt_type, func_body
#line 111 "FParser/gppg/grammar.y"
                                                             { CurrentSemanticValue = new FunctionDefinition(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 52: // opt_params -> /* empty */
#line 114 "FParser/gppg/grammar.y"
                               { CurrentSemanticValue = new ParameterList(); }
#line default
        break;
      case 53: // opt_params -> param_list
#line 115 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 54: // param_list -> param
#line 118 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new ParamenterList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 55: // param_list -> param_list, COMMA, param
#line 119 "FParser/gppg/grammar.y"
                                { ValueStack[ValueStack.Depth-3].parameters.Add(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 56: // param -> ID, COLON, type
#line 122 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new Parameter(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 57: // func_body -> DO, stm_list, END
#line 125 "FParser/gppg/grammar.y"
                                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 58: // func_body -> ARROW, LROUND, expr, RROUND
#line 126 "FParser/gppg/grammar.y"
                                { CurrentSemanticValue = new StatementList(new ExpressionStatement(ValueStack[ValueStack.Depth-2])); }
#line default
        break;
      case 59: // stm_list -> statement
#line 129 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new StatementList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 60: // stm_list -> stm_list, statement
#line 130 "FParser/gppg/grammar.y"
                            { ValueStack[ValueStack.Depth-2].statements.Add(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 61: // statement -> func_call, SEMICOLON
#line 133 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 62: // statement -> assignment
#line 134 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 63: // statement -> declaration
#line 135 "FParser/gppg/grammar.y"
                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 64: // statement -> if_stm
#line 136 "FParser/gppg/grammar.y"
                   { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 65: // statement -> loop_stm
#line 137 "FParser/gppg/grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 66: // statement -> return_stm
#line 138 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 67: // statement -> break_stm
#line 139 "FParser/gppg/grammar.y"
                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 68: // statement -> cont_stm
#line 140 "FParser/gppg/grammar.y"
                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 69: // statement -> print_stm
#line 141 "FParser/gppg/grammar.y"
                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 70: // func_call -> secondary, LROUND, opt_exprs, RROUND
#line 144 "FParser/gppg/grammar.y"
                                              { CurrentSemanticValue = new FunctionCall(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 71: // opt_exprs -> /* empty */
#line 147 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new ExpressionList(); }
#line default
        break;
      case 72: // opt_exprs -> expr_list
#line 148 "FParser/gppg/grammar.y"
                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 73: // expr_list -> expr
#line 151 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = new ExpressionList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 74: // expr_list -> expr_list, COMMA, expr
#line 152 "FParser/gppg/grammar.y"
                             { ValueStack[ValueStack.Depth-3].expressions.Add(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 75: // assignment -> secondary, ASSIGN, expr, SEMICOLON
#line 155 "FParser/gppg/grammar.y"
                                              { CurrentSemanticValue = new AssignmentStatemt(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 76: // if_stm -> IF, expr, THEN, stm_list, END
#line 158 "FParser/gppg/grammar.y"
                                          { CurrentSemanticValue = new IfStatement(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], new StatementList()); }
#line default
        break;
      case 77: // if_stm -> IF, expr, THEN, stm_list, ELSE, stm_list, END
#line 159 "FParser/gppg/grammar.y"
                                               { CurrentSemanticValue = new IfStatement(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 78: // loop_stm -> loop_header, LOOP, stm_list, END
#line 162 "FParser/gppg/grammar.y"
                                          { CurrentSemanticValue = new LoopStatement(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 79: // loop_header -> /* empty */
#line 165 "FParser/gppg/grammar.y"
                                { CurrentSemanticValue = null; }
#line default
        break;
      case 80: // loop_header -> FOR, ID, IN, expr
#line 166 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = new ForHeader(new Identifier(ValueStack[ValueStack.Depth-3]), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 81: // loop_header -> FOR, expr
#line 167 "FParser/gppg/grammar.y"
                    { CurrentSemanticValue = new ForHeader(null, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 82: // loop_header -> WHILE, expr
#line 168 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = new WhileHeader(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 83: // return_stm -> RETURN, SEMICOLON
#line 171 "FParser/gppg/grammar.y"
                                  { CurrentSemanticValue = new ReturnStatement(); }
#line default
        break;
      case 84: // return_stm -> RETURN, expr, SEMICOLON
#line 172 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new ReturnStatement(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 85: // break_stm -> BREAK, SEMICOLON
#line 175 "FParser/gppg/grammar.y"
                                 { CurrentSemanticValue = new BreakStatement(); }
#line default
        break;
      case 86: // cont_stm -> CONTINUE, SEMICOLON
#line 178 "FParser/gppg/grammar.y"
                                  { CurrentSemanticValue = new ContinueStatement(); }
#line default
        break;
      case 87: // print_stm -> PRINT, LROUND, opt_exprs, RROUND, SEMICOLON
#line 181 "FParser/gppg/grammar.y"
                                                     { CurrentSemanticValue = new PrintStatement(ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 88: // array_def -> LSQUARE, opt_exprs, RSQUARE
#line 184 "FParser/gppg/grammar.y"
                                         { CurrentSemanticValue = new ArrayDefinition(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 89: // map_def -> LCURLY, pair_list, RCURLY
#line 187 "FParser/gppg/grammar.y"
                                      { CurrentSemanticValue = new MapDefinition(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 90: // pair_list -> /* empty */
#line 190 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new ExpressionPairList(); }
#line default
        break;
      case 91: // pair_list -> pair
#line 191 "FParser/gppg/grammar.y"
                 { CurrentSemanticValue = new ExpressionPairList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 92: // pair_list -> pair_list, COMMA, pair
#line 192 "FParser/gppg/grammar.y"
                             { ValueStack[ValueStack.Depth-3].pairs.Add(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 93: // pair -> expr, COLON, expr
#line 195 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new PairExpression(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 94: // tuple_def -> LROUND, tuple_elist, RROUND
#line 198 "FParser/gppg/grammar.y"
                                        { CurrentSemanticValue = new TupleDefinition(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 95: // tuple_elist -> tuple_elem
#line 201 "FParser/gppg/grammar.y"
                               { CurrentSemanticValue = new TupleElementList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 96: // tuple_elist -> tuple_elist, COMMA, tuple_elem
#line 202 "FParser/gppg/grammar.y"
                                   { ValueStack[ValueStack.Depth-3].elements.Add(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 97: // tuple_elem -> ID, IS, expr
#line 205 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new TupleElement(new Identifier(ValueStack[ValueStack.Depth-3]), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 98: // tuple_elem -> expr
#line 206 "FParser/gppg/grammar.y"
                 { CurrentSemanticValue = new TupleElement(null, ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 99: // indexer -> LSQUARE, expr, RSQUARE
#line 209 "FParser/gppg/grammar.y"
                                   { CurrentSemanticValue = new SquaresIndexer(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 100: // indexer -> DOT, ID
#line 210 "FParser/gppg/grammar.y"
                   { CurrentSemanticValue = new DotIndexer(new Identifier(ValueStack[ValueStack.Depth-1]), null); }
#line default
        break;
      case 101: // indexer -> DOT, INTEGER_VALUE
#line 211 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new DotIndexer(null, new IntegerValue(ValueStack[ValueStack.Depth-1])); }
#line default
        break;
      case 102: // func_type -> FUNC, LROUND, type_list, RROUND, COLON, type
#line 214 "FParser/gppg/grammar.y"
                                                     { CurrentSemanticValue = new FunctionType(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 103: // type_list -> /* empty */
#line 217 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new TypeList(); }
#line default
        break;
      case 104: // type_list -> type
#line 218 "FParser/gppg/grammar.y"
                 { CurrentSemanticValue = new TypeList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 105: // type_list -> type_list, COMMA, type
#line 219 "FParser/gppg/grammar.y"
                             { ValueStack[ValueStack.Depth-3].types.Add(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 106: // array_type -> LSQUARE, type, RSQUARE
#line 222 "FParser/gppg/grammar.y"
                                      { CurrentSemanticValue = new ArrayType(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 107: // tuple_type -> LROUND, type_list, RROUND
#line 225 "FParser/gppg/grammar.y"
                                         { CurrentSemanticValue = new TupleType(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 108: // map_type -> LCURLY, type, COLON, type, RCURLY
#line 228 "FParser/gppg/grammar.y"
                                           { CurrentSemanticValue = new MapType(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((ETokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((ETokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
