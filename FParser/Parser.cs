// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  filo-Spin-SP513
// DateTime: 6/6/2018 12:45:40 PM
// UserName: filo
// Input file <FParser/gppg/grammar.y - 6/6/2018 12:45:34 PM>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using FFC.FAST;
using FFC.FLexer;

namespace FFC.FParser
{
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<TValue, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[117];
  private static State[] states = new State[217];
  private static string[] nonTerms = new string[] {
      "starting", "$accept", "dec_list", "declaration", "identifier", "opt_type", 
      "expr", "func_def", "type", "func_type", "tuple_type", "array_type", "map_type", 
      "expr2", "secondary", "primary", "func_call", "indexer", "value", "cond", 
      "array_def", "map_def", "tuple_def", "opt_params", "func_body", "param_list", 
      "param", "stm_list", "statement", "ni_stm", "assignment", "loop_stm", "return_stm", 
      "break_stm", "cont_stm", "print_stm", "if_stm", "opt_exprs", "expr_list", 
      "e_if_list", "opt_else", "ni_stm_list", "loop_header", "pair_list", "pair", 
      "tuple_elist", "tuple_elem", "type_list", };

  static Parser() {
    states[0] = new State(new int[]{4,54},new int[]{-1,1,-3,3,-4,216,-5,6});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,4,4,54},new int[]{-4,5,-5,6});
    states[4] = new State(-2);
    states[5] = new State(-4);
    states[6] = new State(new int[]{13,125,27,-8},new int[]{-6,7});
    states[7] = new State(new int[]{27,8});
    states[8] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88},new int[]{-7,9,-8,215,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[9] = new State(new int[]{14,10,45,11,46,13,47,15,48,17,49,19,50,21,51,23,53,25,54,27,52,29,55,31,56,33,57,35});
    states[10] = new State(-5);
    states[11] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,12,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[12] = new State(new int[]{45,-23,46,-23,47,15,48,17,49,19,50,21,51,23,53,25,54,27,52,29,55,31,56,33,57,35,14,-23,12,-23,39,-23,41,-23,29,-23,30,-23,31,-23,13,-23,43,-23,35,-23});
    states[13] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,14,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[14] = new State(new int[]{45,-24,46,-24,47,15,48,17,49,19,50,21,51,23,53,25,54,27,52,29,55,31,56,33,57,35,14,-24,12,-24,39,-24,41,-24,29,-24,30,-24,31,-24,13,-24,43,-24,35,-24});
    states[15] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,16,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[16] = new State(new int[]{45,-25,46,-25,47,-25,48,17,49,19,50,21,51,23,53,25,54,27,52,29,55,31,56,33,57,35,14,-25,12,-25,39,-25,41,-25,29,-25,30,-25,31,-25,13,-25,43,-25,35,-25});
    states[17] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,18,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[18] = new State(new int[]{45,-26,46,-26,47,-26,48,-26,49,-26,50,-26,51,-26,53,-26,54,27,52,-26,55,31,56,33,57,35,14,-26,12,-26,39,-26,41,-26,29,-26,30,-26,31,-26,13,-26,43,-26,35,-26});
    states[19] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,20,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[20] = new State(new int[]{45,-27,46,-27,47,-27,48,-27,49,-27,50,-27,51,-27,53,-27,54,27,52,-27,55,31,56,33,57,35,14,-27,12,-27,39,-27,41,-27,29,-27,30,-27,31,-27,13,-27,43,-27,35,-27});
    states[21] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,22,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[22] = new State(new int[]{45,-28,46,-28,47,-28,48,-28,49,-28,50,-28,51,-28,53,-28,54,27,52,-28,55,31,56,33,57,35,14,-28,12,-28,39,-28,41,-28,29,-28,30,-28,31,-28,13,-28,43,-28,35,-28});
    states[23] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,24,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[24] = new State(new int[]{45,-29,46,-29,47,-29,48,-29,49,-29,50,-29,51,-29,53,-29,54,27,52,-29,55,31,56,33,57,35,14,-29,12,-29,39,-29,41,-29,29,-29,30,-29,31,-29,13,-29,43,-29,35,-29});
    states[25] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,26,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[26] = new State(new int[]{45,-30,46,-30,47,-30,48,-30,49,-30,50,-30,51,-30,53,-30,54,27,52,-30,55,31,56,33,57,35,14,-30,12,-30,39,-30,41,-30,29,-30,30,-30,31,-30,13,-30,43,-30,35,-30});
    states[27] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,28,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[28] = new State(new int[]{45,-31,46,-31,47,-31,48,-31,49,-31,50,-31,51,-31,53,-31,54,-31,52,-31,55,-31,56,33,57,35,14,-31,12,-31,39,-31,41,-31,29,-31,30,-31,31,-31,13,-31,43,-31,35,-31});
    states[29] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,30,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[30] = new State(new int[]{45,-32,46,-32,47,-32,48,-32,49,-32,50,-32,51,-32,53,-32,54,27,52,-32,55,31,56,33,57,35,14,-32,12,-32,39,-32,41,-32,29,-32,30,-32,31,-32,13,-32,43,-32,35,-32});
    states[31] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,32,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[32] = new State(new int[]{45,-33,46,-33,47,-33,48,-33,49,-33,50,-33,51,-33,53,-33,54,-33,52,-33,55,-33,56,33,57,35,14,-33,12,-33,39,-33,41,-33,29,-33,30,-33,31,-33,13,-33,43,-33,35,-33});
    states[33] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,34,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[34] = new State(-34);
    states[35] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,36,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[36] = new State(-35);
    states[37] = new State(new int[]{38,38,40,118,11,121,14,-22,45,-22,46,-22,47,-22,48,-22,49,-22,50,-22,51,-22,53,-22,54,-22,52,-22,55,-22,56,-22,57,-22,12,-22,39,-22,41,-22,29,-22,30,-22,31,-22,13,-22,43,-22,35,-22},new int[]{-18,114});
    states[38] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88,39,-73},new int[]{-38,39,-39,41,-14,67,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[39] = new State(new int[]{39,40});
    states[40] = new State(-72);
    states[41] = new State(new int[]{12,42,39,-74,41,-74});
    states[42] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88},new int[]{-14,43,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[43] = new State(-76);
    states[44] = new State(new int[]{45,11,46,13,47,15,48,17,49,19,50,21,51,23,53,25,54,27,52,29,55,31,56,33,57,35,12,-20,39,-20,41,-20,30,-20,31,-20,13,-20,43,-20,14,-20});
    states[45] = new State(-36);
    states[46] = new State(-39);
    states[47] = new State(-44);
    states[48] = new State(-45);
    states[49] = new State(-46);
    states[50] = new State(-47);
    states[51] = new State(-48);
    states[52] = new State(-49);
    states[53] = new State(-50);
    states[54] = new State(-7);
    states[55] = new State(-40);
    states[56] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,57,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[57] = new State(new int[]{29,58,45,11,46,13,47,15,48,17,49,19,50,21,51,23,53,25,54,27,52,29,55,31,56,33,57,35});
    states[58] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88},new int[]{-14,59,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[59] = new State(new int[]{30,60});
    states[60] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88},new int[]{-14,61,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[61] = new State(new int[]{31,62});
    states[62] = new State(-51);
    states[63] = new State(-41);
    states[64] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88,41,-73},new int[]{-38,65,-39,41,-14,67,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[65] = new State(new int[]{41,66});
    states[66] = new State(-96);
    states[67] = new State(-75);
    states[68] = new State(-42);
    states[69] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88,43,-98,12,-98},new int[]{-44,70,-45,214,-14,74,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[70] = new State(new int[]{43,71,12,72});
    states[71] = new State(-97);
    states[72] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88},new int[]{-45,73,-14,74,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[73] = new State(-100);
    states[74] = new State(new int[]{13,75});
    states[75] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88},new int[]{-14,76,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[76] = new State(-101);
    states[77] = new State(-43);
    states[78] = new State(new int[]{4,54,5,47,6,48,7,49,8,50,9,51,10,52,28,56,40,64,42,69,38,78,23,88},new int[]{-46,79,-47,213,-5,83,-14,212,-7,44,-15,37,-16,45,-19,46,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[79] = new State(new int[]{39,80,12,81});
    states[80] = new State(-102);
    states[81] = new State(new int[]{4,54,5,47,6,48,7,49,8,50,9,51,10,52,28,56,40,64,42,69,38,78,23,88},new int[]{-47,82,-5,83,-14,212,-7,44,-15,37,-16,45,-19,46,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[82] = new State(-104);
    states[83] = new State(new int[]{27,84,38,-50,40,-50,11,-50,45,-50,46,-50,47,-50,48,-50,49,-50,50,-50,51,-50,53,-50,54,-50,52,-50,55,-50,56,-50,57,-50,39,-50,12,-50});
    states[84] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88},new int[]{-14,85,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[85] = new State(-105);
    states[86] = new State(-37);
    states[87] = new State(-21);
    states[88] = new State(new int[]{38,89});
    states[89] = new State(new int[]{4,54,39,-53},new int[]{-24,90,-26,205,-27,211,-5,208});
    states[90] = new State(new int[]{39,91});
    states[91] = new State(new int[]{13,125,24,-8,22,-8},new int[]{-6,92});
    states[92] = new State(new int[]{24,94,22,201},new int[]{-25,93});
    states[93] = new State(-52);
    states[94] = new State(new int[]{28,99,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,35,-87},new int[]{-28,95,-29,188,-37,98,-30,110,-17,111,-15,113,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182});
    states[95] = new State(new int[]{31,96,28,99,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,35,-87},new int[]{-29,97,-37,98,-30,110,-17,111,-15,113,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182});
    states[96] = new State(-58);
    states[97] = new State(-61);
    states[98] = new State(-70);
    states[99] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,100,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[100] = new State(new int[]{29,101,45,11,46,13,47,15,48,17,49,19,50,21,51,23,53,25,54,27,52,29,55,31,56,33,57,35});
    states[101] = new State(new int[]{28,99,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,23,88,35,-87},new int[]{-28,102,-14,59,-29,188,-37,98,-30,110,-17,111,-15,189,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182,-7,44,-8,87});
    states[102] = new State(new int[]{30,196,31,194,28,99,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,35,-87},new int[]{-40,103,-41,195,-29,97,-37,98,-30,110,-17,111,-15,113,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182});
    states[103] = new State(new int[]{30,105,31,194},new int[]{-41,104});
    states[104] = new State(-78);
    states[105] = new State(new int[]{28,106,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,35,-87},new int[]{-42,190,-30,193,-17,111,-15,113,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182});
    states[106] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,107,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[107] = new State(new int[]{29,108,45,11,46,13,47,15,48,17,49,19,50,21,51,23,53,25,54,27,52,29,55,31,56,33,57,35});
    states[108] = new State(new int[]{28,99,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,23,88,35,-87},new int[]{-28,109,-14,59,-29,188,-37,98,-30,110,-17,111,-15,189,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182,-7,44,-8,87});
    states[109] = new State(new int[]{28,99,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,30,-81,31,-81,35,-87},new int[]{-29,97,-37,98,-30,110,-17,111,-15,113,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182});
    states[110] = new State(-71);
    states[111] = new State(new int[]{14,112,38,-37,21,-37,40,-37,11,-37,45,-37,46,-37,47,-37,48,-37,49,-37,50,-37,51,-37,53,-37,54,-37,52,-37,55,-37,56,-37,57,-37,30,-37});
    states[112] = new State(-62);
    states[113] = new State(new int[]{38,38,21,115,40,118,11,121},new int[]{-18,114});
    states[114] = new State(-38);
    states[115] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88},new int[]{-14,116,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[116] = new State(new int[]{14,117});
    states[117] = new State(-77);
    states[118] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88},new int[]{-14,119,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[119] = new State(new int[]{41,120});
    states[120] = new State(-107);
    states[121] = new State(new int[]{6,123,4,54},new int[]{-5,122});
    states[122] = new State(-108);
    states[123] = new State(-109);
    states[124] = new State(new int[]{13,125,38,-50,21,-50,40,-50,11,-50,45,-50,46,-50,47,-50,48,-50,49,-50,50,-50,51,-50,53,-50,54,-50,52,-50,55,-50,56,-50,57,-50,30,-50,27,-8},new int[]{-6,7});
    states[125] = new State(new int[]{15,127,16,128,17,129,18,130,19,131,20,132,23,134,38,141,40,147,42,151},new int[]{-9,126,-10,133,-11,140,-12,146,-13,150});
    states[126] = new State(-9);
    states[127] = new State(-10);
    states[128] = new State(-11);
    states[129] = new State(-12);
    states[130] = new State(-13);
    states[131] = new State(-14);
    states[132] = new State(-15);
    states[133] = new State(-16);
    states[134] = new State(new int[]{38,135});
    states[135] = new State(new int[]{15,127,16,128,17,129,18,130,19,131,20,132,23,134,38,141,40,147,42,151,39,-111,12,-111},new int[]{-48,136,-9,156,-10,133,-11,140,-12,146,-13,150});
    states[136] = new State(new int[]{39,137,12,144});
    states[137] = new State(new int[]{13,138});
    states[138] = new State(new int[]{15,127,16,128,17,129,18,130,19,131,20,132,23,134,38,141,40,147,42,151},new int[]{-9,139,-10,133,-11,140,-12,146,-13,150});
    states[139] = new State(-110);
    states[140] = new State(-17);
    states[141] = new State(new int[]{15,127,16,128,17,129,18,130,19,131,20,132,23,134,38,141,40,147,42,151,39,-111,12,-111},new int[]{-48,142,-9,156,-10,133,-11,140,-12,146,-13,150});
    states[142] = new State(new int[]{39,143,12,144});
    states[143] = new State(-115);
    states[144] = new State(new int[]{15,127,16,128,17,129,18,130,19,131,20,132,23,134,38,141,40,147,42,151},new int[]{-9,145,-10,133,-11,140,-12,146,-13,150});
    states[145] = new State(-113);
    states[146] = new State(-18);
    states[147] = new State(new int[]{15,127,16,128,17,129,18,130,19,131,20,132,23,134,38,141,40,147,42,151},new int[]{-9,148,-10,133,-11,140,-12,146,-13,150});
    states[148] = new State(new int[]{41,149});
    states[149] = new State(-114);
    states[150] = new State(-19);
    states[151] = new State(new int[]{15,127,16,128,17,129,18,130,19,131,20,132,23,134,38,141,40,147,42,151},new int[]{-9,152,-10,133,-11,140,-12,146,-13,150});
    states[152] = new State(new int[]{13,153});
    states[153] = new State(new int[]{15,127,16,128,17,129,18,130,19,131,20,132,23,134,38,141,40,147,42,151},new int[]{-9,154,-10,133,-11,140,-12,146,-13,150});
    states[154] = new State(new int[]{43,155});
    states[155] = new State(-116);
    states[156] = new State(-112);
    states[157] = new State(-63);
    states[158] = new State(-64);
    states[159] = new State(-65);
    states[160] = new State(new int[]{35,161});
    states[161] = new State(new int[]{28,99,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,35,-87},new int[]{-28,162,-29,188,-37,98,-30,110,-17,111,-15,113,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182});
    states[162] = new State(new int[]{31,163,28,99,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,35,-87},new int[]{-29,97,-37,98,-30,110,-17,111,-15,113,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182});
    states[163] = new State(-86);
    states[164] = new State(new int[]{4,54,5,47,6,48,7,49,8,50,9,51,10,52,28,56,40,64,42,69,38,78},new int[]{-5,165,-7,168,-15,37,-16,45,-19,46,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[165] = new State(new int[]{34,166,38,-50,40,-50,11,-50,45,-50,46,-50,47,-50,48,-50,49,-50,50,-50,51,-50,53,-50,54,-50,52,-50,55,-50,56,-50,57,-50,35,-50});
    states[166] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,167,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[167] = new State(new int[]{45,11,46,13,47,15,48,17,49,19,50,21,51,23,53,25,54,27,52,29,55,31,56,33,57,35,35,-88});
    states[168] = new State(new int[]{45,11,46,13,47,15,48,17,49,19,50,21,51,23,53,25,54,27,52,29,55,31,56,33,57,35,35,-89});
    states[169] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,170,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[170] = new State(new int[]{45,11,46,13,47,15,48,17,49,19,50,21,51,23,53,25,54,27,52,29,55,31,56,33,57,35,35,-90});
    states[171] = new State(-66);
    states[172] = new State(new int[]{14,173,5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88},new int[]{-14,174,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[173] = new State(-91);
    states[174] = new State(new int[]{14,175});
    states[175] = new State(-92);
    states[176] = new State(-67);
    states[177] = new State(new int[]{14,178});
    states[178] = new State(-93);
    states[179] = new State(-68);
    states[180] = new State(new int[]{14,181});
    states[181] = new State(-94);
    states[182] = new State(-69);
    states[183] = new State(new int[]{38,184});
    states[184] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88,39,-73},new int[]{-38,185,-39,41,-14,67,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[185] = new State(new int[]{39,186});
    states[186] = new State(new int[]{14,187});
    states[187] = new State(-95);
    states[188] = new State(-60);
    states[189] = new State(new int[]{38,38,21,115,40,118,11,121,45,-22,46,-22,47,-22,48,-22,49,-22,50,-22,51,-22,53,-22,54,-22,52,-22,55,-22,56,-22,57,-22,30,-22},new int[]{-18,114});
    states[190] = new State(new int[]{31,191,28,99,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,35,-87},new int[]{-29,192,-37,98,-30,110,-17,111,-15,113,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182});
    states[191] = new State(-83);
    states[192] = new State(-85);
    states[193] = new State(-84);
    states[194] = new State(-82);
    states[195] = new State(-79);
    states[196] = new State(new int[]{28,197,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,35,-87},new int[]{-42,190,-30,193,-17,111,-15,113,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182});
    states[197] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78},new int[]{-7,198,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86});
    states[198] = new State(new int[]{29,199,45,11,46,13,47,15,48,17,49,19,50,21,51,23,53,25,54,27,52,29,55,31,56,33,57,35});
    states[199] = new State(new int[]{28,99,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,23,88,35,-87},new int[]{-28,200,-14,59,-29,188,-37,98,-30,110,-17,111,-15,189,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182,-7,44,-8,87});
    states[200] = new State(new int[]{28,99,5,47,6,48,7,49,8,50,9,51,10,52,4,54,40,64,42,69,38,78,33,164,32,169,25,172,36,177,37,180,26,183,30,-80,31,-80,35,-87},new int[]{-29,97,-37,98,-30,110,-17,111,-15,113,-16,45,-19,46,-5,124,-20,55,-21,63,-22,68,-23,77,-31,157,-4,158,-32,159,-43,160,-33,171,-34,176,-35,179,-36,182});
    states[201] = new State(new int[]{38,202});
    states[202] = new State(new int[]{5,47,6,48,7,49,8,50,9,51,10,52,4,54,28,56,40,64,42,69,38,78,23,88},new int[]{-14,203,-7,44,-15,37,-16,45,-19,46,-5,53,-20,55,-21,63,-22,68,-23,77,-17,86,-8,87});
    states[203] = new State(new int[]{39,204});
    states[204] = new State(-59);
    states[205] = new State(new int[]{12,206,39,-54});
    states[206] = new State(new int[]{4,54},new int[]{-27,207,-5,208});
    states[207] = new State(-56);
    states[208] = new State(new int[]{13,209});
    states[209] = new State(new int[]{15,127,16,128,17,129,18,130,19,131,20,132,23,134,38,141,40,147,42,151},new int[]{-9,210,-10,133,-11,140,-12,146,-13,150});
    states[210] = new State(-57);
    states[211] = new State(-55);
    states[212] = new State(-106);
    states[213] = new State(-103);
    states[214] = new State(-99);
    states[215] = new State(-6);
    states[216] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3,3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-3,-4});
    rules[5] = new Rule(-4, new int[]{-5,-6,27,-7,14});
    rules[6] = new Rule(-4, new int[]{-5,-6,27,-8});
    rules[7] = new Rule(-5, new int[]{4});
    rules[8] = new Rule(-6, new int[]{});
    rules[9] = new Rule(-6, new int[]{13,-9});
    rules[10] = new Rule(-9, new int[]{15});
    rules[11] = new Rule(-9, new int[]{16});
    rules[12] = new Rule(-9, new int[]{17});
    rules[13] = new Rule(-9, new int[]{18});
    rules[14] = new Rule(-9, new int[]{19});
    rules[15] = new Rule(-9, new int[]{20});
    rules[16] = new Rule(-9, new int[]{-10});
    rules[17] = new Rule(-9, new int[]{-11});
    rules[18] = new Rule(-9, new int[]{-12});
    rules[19] = new Rule(-9, new int[]{-13});
    rules[20] = new Rule(-14, new int[]{-7});
    rules[21] = new Rule(-14, new int[]{-8});
    rules[22] = new Rule(-7, new int[]{-15});
    rules[23] = new Rule(-7, new int[]{-7,45,-7});
    rules[24] = new Rule(-7, new int[]{-7,46,-7});
    rules[25] = new Rule(-7, new int[]{-7,47,-7});
    rules[26] = new Rule(-7, new int[]{-7,48,-7});
    rules[27] = new Rule(-7, new int[]{-7,49,-7});
    rules[28] = new Rule(-7, new int[]{-7,50,-7});
    rules[29] = new Rule(-7, new int[]{-7,51,-7});
    rules[30] = new Rule(-7, new int[]{-7,53,-7});
    rules[31] = new Rule(-7, new int[]{-7,54,-7});
    rules[32] = new Rule(-7, new int[]{-7,52,-7});
    rules[33] = new Rule(-7, new int[]{-7,55,-7});
    rules[34] = new Rule(-7, new int[]{-7,56,-7});
    rules[35] = new Rule(-7, new int[]{-7,57,-7});
    rules[36] = new Rule(-15, new int[]{-16});
    rules[37] = new Rule(-15, new int[]{-17});
    rules[38] = new Rule(-15, new int[]{-15,-18});
    rules[39] = new Rule(-16, new int[]{-19});
    rules[40] = new Rule(-16, new int[]{-20});
    rules[41] = new Rule(-16, new int[]{-21});
    rules[42] = new Rule(-16, new int[]{-22});
    rules[43] = new Rule(-16, new int[]{-23});
    rules[44] = new Rule(-19, new int[]{5});
    rules[45] = new Rule(-19, new int[]{6});
    rules[46] = new Rule(-19, new int[]{7});
    rules[47] = new Rule(-19, new int[]{8});
    rules[48] = new Rule(-19, new int[]{9});
    rules[49] = new Rule(-19, new int[]{10});
    rules[50] = new Rule(-19, new int[]{-5});
    rules[51] = new Rule(-20, new int[]{28,-7,29,-14,30,-14,31});
    rules[52] = new Rule(-8, new int[]{23,38,-24,39,-6,-25});
    rules[53] = new Rule(-24, new int[]{});
    rules[54] = new Rule(-24, new int[]{-26});
    rules[55] = new Rule(-26, new int[]{-27});
    rules[56] = new Rule(-26, new int[]{-26,12,-27});
    rules[57] = new Rule(-27, new int[]{-5,13,-9});
    rules[58] = new Rule(-25, new int[]{24,-28,31});
    rules[59] = new Rule(-25, new int[]{22,38,-14,39});
    rules[60] = new Rule(-28, new int[]{-29});
    rules[61] = new Rule(-28, new int[]{-28,-29});
    rules[62] = new Rule(-30, new int[]{-17,14});
    rules[63] = new Rule(-30, new int[]{-31});
    rules[64] = new Rule(-30, new int[]{-4});
    rules[65] = new Rule(-30, new int[]{-32});
    rules[66] = new Rule(-30, new int[]{-33});
    rules[67] = new Rule(-30, new int[]{-34});
    rules[68] = new Rule(-30, new int[]{-35});
    rules[69] = new Rule(-30, new int[]{-36});
    rules[70] = new Rule(-29, new int[]{-37});
    rules[71] = new Rule(-29, new int[]{-30});
    rules[72] = new Rule(-17, new int[]{-15,38,-38,39});
    rules[73] = new Rule(-38, new int[]{});
    rules[74] = new Rule(-38, new int[]{-39});
    rules[75] = new Rule(-39, new int[]{-14});
    rules[76] = new Rule(-39, new int[]{-39,12,-14});
    rules[77] = new Rule(-31, new int[]{-15,21,-14,14});
    rules[78] = new Rule(-37, new int[]{28,-7,29,-28,-40,-41});
    rules[79] = new Rule(-37, new int[]{28,-7,29,-28,-41});
    rules[80] = new Rule(-40, new int[]{30,28,-7,29,-28});
    rules[81] = new Rule(-40, new int[]{-40,30,28,-7,29,-28});
    rules[82] = new Rule(-41, new int[]{31});
    rules[83] = new Rule(-41, new int[]{30,-42,31});
    rules[84] = new Rule(-42, new int[]{-30});
    rules[85] = new Rule(-42, new int[]{-42,-29});
    rules[86] = new Rule(-32, new int[]{-43,35,-28,31});
    rules[87] = new Rule(-43, new int[]{});
    rules[88] = new Rule(-43, new int[]{33,-5,34,-7});
    rules[89] = new Rule(-43, new int[]{33,-7});
    rules[90] = new Rule(-43, new int[]{32,-7});
    rules[91] = new Rule(-33, new int[]{25,14});
    rules[92] = new Rule(-33, new int[]{25,-14,14});
    rules[93] = new Rule(-34, new int[]{36,14});
    rules[94] = new Rule(-35, new int[]{37,14});
    rules[95] = new Rule(-36, new int[]{26,38,-38,39,14});
    rules[96] = new Rule(-21, new int[]{40,-38,41});
    rules[97] = new Rule(-22, new int[]{42,-44,43});
    rules[98] = new Rule(-44, new int[]{});
    rules[99] = new Rule(-44, new int[]{-45});
    rules[100] = new Rule(-44, new int[]{-44,12,-45});
    rules[101] = new Rule(-45, new int[]{-14,13,-14});
    rules[102] = new Rule(-23, new int[]{38,-46,39});
    rules[103] = new Rule(-46, new int[]{-47});
    rules[104] = new Rule(-46, new int[]{-46,12,-47});
    rules[105] = new Rule(-47, new int[]{-5,27,-14});
    rules[106] = new Rule(-47, new int[]{-14});
    rules[107] = new Rule(-18, new int[]{40,-14,41});
    rules[108] = new Rule(-18, new int[]{11,-5});
    rules[109] = new Rule(-18, new int[]{11,6});
    rules[110] = new Rule(-10, new int[]{23,38,-48,39,13,-9});
    rules[111] = new Rule(-48, new int[]{});
    rules[112] = new Rule(-48, new int[]{-9});
    rules[113] = new Rule(-48, new int[]{-48,12,-9});
    rules[114] = new Rule(-12, new int[]{40,-9,41});
    rules[115] = new Rule(-11, new int[]{38,-48,39});
    rules[116] = new Rule(-13, new int[]{42,-9,13,-9,43});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)ETokens.ERROR, (int)ETokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // starting -> dec_list, EOF
#line 43 "FParser/gppg/grammar.y"
                                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 3: // dec_list -> declaration
#line 46 "FParser/gppg/grammar.y"
                                   { CurrentSemanticValue = new DeclarationStatementList((DeclarationStatement)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 4: // dec_list -> dec_list, declaration
#line 47 "FParser/gppg/grammar.y"
                                   { ((DeclarationStatementList)ValueStack[ValueStack.Depth-2]).statements.Add((DeclarationStatement)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 5: // declaration -> identifier, opt_type, IS, expr, SEMICOLON
#line 50 "FParser/gppg/grammar.y"
                                                        { CurrentSemanticValue = new DeclarationStatement((Identifier)ValueStack[ValueStack.Depth-5], (FType)ValueStack[ValueStack.Depth-4], (FExpression)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 6: // declaration -> identifier, opt_type, IS, func_def
#line 51 "FParser/gppg/grammar.y"
                                           { CurrentSemanticValue = new DeclarationStatement((Identifier)ValueStack[ValueStack.Depth-4], (FType)ValueStack[ValueStack.Depth-3], (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 7: // identifier -> ID
#line 54 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new Identifier(((TokenValue)ValueStack[ValueStack.Depth-1])[0].ToString()); }
#line default
        break;
      case 8: // opt_type -> /* empty */
#line 57 "FParser/gppg/grammar.y"
                                  { CurrentSemanticValue = null; }
#line default
        break;
      case 9: // opt_type -> COLON, type
#line 58 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = (FType) ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 10: // type -> INTEGER
#line 61 "FParser/gppg/grammar.y"
                            { CurrentSemanticValue = new IntegerType(); }
#line default
        break;
      case 11: // type -> COMPLEX
#line 62 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = new ComplexType(); }
#line default
        break;
      case 12: // type -> RATIONAL
#line 63 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = new RationalType(); }
#line default
        break;
      case 13: // type -> REAL
#line 64 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = new RealType(); }
#line default
        break;
      case 14: // type -> STRING
#line 65 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = new StringType(); }
#line default
        break;
      case 15: // type -> BOOLEAN
#line 66 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = new BooleanType(); }
#line default
        break;
      case 16: // type -> func_type
#line 67 "FParser/gppg/grammar.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 17: // type -> tuple_type
#line 68 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 18: // type -> array_type
#line 69 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 19: // type -> map_type
#line 70 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 20: // expr2 -> expr
#line 73 "FParser/gppg/grammar.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 21: // expr2 -> func_def
#line 74 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 22: // expr -> secondary
#line 77 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 23: // expr -> expr, OR, expr
#line 78 "FParser/gppg/grammar.y"
                            { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new OrOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 24: // expr -> expr, XOR, expr
#line 79 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new XorOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 25: // expr -> expr, AND, expr
#line 80 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new AndOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 26: // expr -> expr, LESS, expr
#line 81 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new LessOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 27: // expr -> expr, LESSEQUAL, expr
#line 82 "FParser/gppg/grammar.y"
                                  { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new LessEqualOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 28: // expr -> expr, GREATER, expr
#line 83 "FParser/gppg/grammar.y"
                                { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new GreaterOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 29: // expr -> expr, GREATEREQUAL, expr
#line 84 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new GreaterEqualOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 30: // expr -> expr, NOTEQUAL, expr
#line 85 "FParser/gppg/grammar.y"
                                 { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new NotEqualOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 31: // expr -> expr, PLUS, expr
#line 86 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new PlusOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 32: // expr -> expr, EQUAL, expr
#line 87 "FParser/gppg/grammar.y"
                               { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new EqualOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 33: // expr -> expr, MINUS, expr
#line 88 "FParser/gppg/grammar.y"
                               { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new MinusOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 34: // expr -> expr, STAR, expr
#line 89 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new StarOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 35: // expr -> expr, SLASH, expr
#line 90 "FParser/gppg/grammar.y"
                               { CurrentSemanticValue = new BinaryOperatorExpression((FExpression)ValueStack[ValueStack.Depth-3], new SlashOperator(), (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 36: // secondary -> primary
#line 95 "FParser/gppg/grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 37: // secondary -> func_call
#line 96 "FParser/gppg/grammar.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 38: // secondary -> secondary, indexer
#line 97 "FParser/gppg/grammar.y"
                                { CurrentSemanticValue = new IndexedAccess((FSecondary)ValueStack[ValueStack.Depth-2], (Indexer)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 39: // primary -> value
#line 100 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 40: // primary -> cond
#line 101 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 41: // primary -> array_def
#line 103 "FParser/gppg/grammar.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 42: // primary -> map_def
#line 104 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 43: // primary -> tuple_def
#line 105 "FParser/gppg/grammar.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 44: // value -> BOOLEAN_VALUE
#line 109 "FParser/gppg/grammar.y"
                                 { CurrentSemanticValue = new BooleanValue((bool) ((TokenValue)ValueStack[ValueStack.Depth-1])[0]); }
#line default
        break;
      case 45: // value -> INTEGER_VALUE
#line 110 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new IntegerValue((int) ((TokenValue)ValueStack[ValueStack.Depth-1])[0]); }
#line default
        break;
      case 46: // value -> REAL_VALUE
#line 111 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new RealValue((double) ((TokenValue)ValueStack[ValueStack.Depth-1])[0]); }
#line default
        break;
      case 47: // value -> RATIONAL_VALUE
#line 112 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new RationalValue((int) ((TokenValue)ValueStack[ValueStack.Depth-1])[0], (int) ((TokenValue)ValueStack[ValueStack.Depth-1])[1]); }
#line default
        break;
      case 48: // value -> COMPLEX_VALUE
#line 113 "FParser/gppg/grammar.y"
                             { CurrentSemanticValue = new ComplexValue((double) ((TokenValue)ValueStack[ValueStack.Depth-1])[0], (double) ((TokenValue)ValueStack[ValueStack.Depth-1])[1]); }
#line default
        break;
      case 49: // value -> STRING_VALUE
#line 114 "FParser/gppg/grammar.y"
                            { CurrentSemanticValue = new StringValue((string) ((TokenValue)ValueStack[ValueStack.Depth-1])[0]); }
#line default
        break;
      case 50: // value -> identifier
#line 115 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 51: // cond -> IF, expr, THEN, expr2, ELSE, expr2, END
#line 118 "FParser/gppg/grammar.y"
                                               { CurrentSemanticValue = new Conditional((FExpression)ValueStack[ValueStack.Depth-6], (FExpression)ValueStack[ValueStack.Depth-4], (FExpression)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 52: // func_def -> FUNC, LROUND, opt_params, RROUND, opt_type, func_body
#line 121 "FParser/gppg/grammar.y"
                                                             { CurrentSemanticValue = new FunctionDefinition((ParameterList)ValueStack[ValueStack.Depth-4], (FType)ValueStack[ValueStack.Depth-2], (StatementList)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 53: // opt_params -> /* empty */
#line 124 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new ParameterList(); }
#line default
        break;
      case 54: // opt_params -> param_list
#line 125 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 55: // param_list -> param
#line 128 "FParser/gppg/grammar.y"
                                { CurrentSemanticValue = new ParameterList((Parameter)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 56: // param_list -> param_list, COMMA, param
#line 129 "FParser/gppg/grammar.y"
                                     { ((ParameterList)ValueStack[ValueStack.Depth-3]).parameters.Add((Parameter)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 57: // param -> identifier, COLON, type
#line 132 "FParser/gppg/grammar.y"
                                       { CurrentSemanticValue = new Parameter((Identifier)ValueStack[ValueStack.Depth-3], (FType)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 58: // func_body -> DO, stm_list, END
#line 135 "FParser/gppg/grammar.y"
                                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 59: // func_body -> ARROW, LROUND, expr2, RROUND
#line 136 "FParser/gppg/grammar.y"
                                      { CurrentSemanticValue = new StatementList(new ExpressionStatement((FExpression)ValueStack[ValueStack.Depth-2])); }
#line default
        break;
      case 60: // stm_list -> statement
#line 139 "FParser/gppg/grammar.y"
                                { CurrentSemanticValue = new StatementList((FStatement)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 61: // stm_list -> stm_list, statement
#line 140 "FParser/gppg/grammar.y"
                                 { ((StatementList)ValueStack[ValueStack.Depth-2]).statements.Add((FStatement)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 62: // ni_stm -> func_call, SEMICOLON
#line 143 "FParser/gppg/grammar.y"
                                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 63: // ni_stm -> assignment
#line 144 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 64: // ni_stm -> declaration
#line 145 "FParser/gppg/grammar.y"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 65: // ni_stm -> loop_stm
#line 146 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 66: // ni_stm -> return_stm
#line 147 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 67: // ni_stm -> break_stm
#line 148 "FParser/gppg/grammar.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 68: // ni_stm -> cont_stm
#line 149 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 69: // ni_stm -> print_stm
#line 150 "FParser/gppg/grammar.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 70: // statement -> if_stm
#line 153 "FParser/gppg/grammar.y"
                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 71: // statement -> ni_stm
#line 154 "FParser/gppg/grammar.y"
                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 72: // func_call -> secondary, LROUND, opt_exprs, RROUND
#line 157 "FParser/gppg/grammar.y"
                                                   { CurrentSemanticValue = new FunctionCall((FSecondary)ValueStack[ValueStack.Depth-4], (ExpressionList)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 73: // opt_exprs -> /* empty */
#line 160 "FParser/gppg/grammar.y"
                                   { CurrentSemanticValue = new ExpressionList(); }
#line default
        break;
      case 74: // opt_exprs -> expr_list
#line 161 "FParser/gppg/grammar.y"
                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 75: // expr_list -> expr2
#line 164 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new ExpressionList((FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 76: // expr_list -> expr_list, COMMA, expr2
#line 165 "FParser/gppg/grammar.y"
                                   { ((ExpressionList)ValueStack[ValueStack.Depth-3]).expressions.Add((FExpression)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 77: // assignment -> secondary, ASSIGN, expr2, SEMICOLON
#line 168 "FParser/gppg/grammar.y"
                                                   { CurrentSemanticValue = new AssignmentStatemt((FSecondary)ValueStack[ValueStack.Depth-4], (FExpression)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 78: // if_stm -> IF, expr, THEN, stm_list, e_if_list, opt_else
#line 171 "FParser/gppg/grammar.y"
                                                       { CurrentSemanticValue = new IfStatement((FExpression)ValueStack[ValueStack.Depth-5], (StatementList)ValueStack[ValueStack.Depth-3], (ElseIfList)ValueStack[ValueStack.Depth-2], (StatementList)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 79: // if_stm -> IF, expr, THEN, stm_list, opt_else
#line 172 "FParser/gppg/grammar.y"
                                          { CurrentSemanticValue = new IfStatement((FExpression)ValueStack[ValueStack.Depth-4], (StatementList)ValueStack[ValueStack.Depth-2], new ElseIfList(), (StatementList)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 80: // e_if_list -> ELSE, IF, expr, THEN, stm_list
#line 175 "FParser/gppg/grammar.y"
                                              { CurrentSemanticValue = new ElseIfList(new ElseIfStatement((FExpression) ValueStack[ValueStack.Depth-3], (StatementList) ValueStack[ValueStack.Depth-1])); }
#line default
        break;
      case 81: // e_if_list -> e_if_list, ELSE, IF, expr, THEN, stm_list
#line 176 "FParser/gppg/grammar.y"
                                              { ((ElseIfList)(ValueStack[ValueStack.Depth-6])).Add(new ElseIfStatement((FExpression) ValueStack[ValueStack.Depth-3], (StatementList) ValueStack[ValueStack.Depth-1])); CurrentSemanticValue = ValueStack[ValueStack.Depth-6]; }
#line default
        break;
      case 82: // opt_else -> END
#line 179 "FParser/gppg/grammar.y"
                            { CurrentSemanticValue = new StatementList(); }
#line default
        break;
      case 83: // opt_else -> ELSE, ni_stm_list, END
#line 180 "FParser/gppg/grammar.y"
                                  { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 84: // ni_stm_list -> ni_stm
#line 183 "FParser/gppg/grammar.y"
                                 { CurrentSemanticValue = new StatementList((FStatement)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 85: // ni_stm_list -> ni_stm_list, statement
#line 184 "FParser/gppg/grammar.y"
                                   { ((StatementList)ValueStack[ValueStack.Depth-2]).Add((FStatement)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 86: // loop_stm -> loop_header, LOOP, stm_list, END
#line 187 "FParser/gppg/grammar.y"
                                               { CurrentSemanticValue = new LoopStatement((FLoopHeader)ValueStack[ValueStack.Depth-4], (StatementList)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 87: // loop_header -> /* empty */
#line 190 "FParser/gppg/grammar.y"
                                     { CurrentSemanticValue = null; }
#line default
        break;
      case 88: // loop_header -> FOR, identifier, IN, expr
#line 191 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new ForHeader((Identifier)ValueStack[ValueStack.Depth-3], (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 89: // loop_header -> FOR, expr
#line 192 "FParser/gppg/grammar.y"
                         { CurrentSemanticValue = new ForHeader(null, (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 90: // loop_header -> WHILE, expr
#line 193 "FParser/gppg/grammar.y"
                           { CurrentSemanticValue = new WhileHeader((FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 91: // return_stm -> RETURN, SEMICOLON
#line 196 "FParser/gppg/grammar.y"
                                       { CurrentSemanticValue = new ReturnStatement(); }
#line default
        break;
      case 92: // return_stm -> RETURN, expr2, SEMICOLON
#line 197 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new ReturnStatement((FExpression)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 93: // break_stm -> BREAK, SEMICOLON
#line 200 "FParser/gppg/grammar.y"
                                      { CurrentSemanticValue = new BreakStatement(); }
#line default
        break;
      case 94: // cont_stm -> CONTINUE, SEMICOLON
#line 203 "FParser/gppg/grammar.y"
                                       { CurrentSemanticValue = new ContinueStatement(); }
#line default
        break;
      case 95: // print_stm -> PRINT, LROUND, opt_exprs, RROUND, SEMICOLON
#line 206 "FParser/gppg/grammar.y"
                                                        { CurrentSemanticValue = new PrintStatement((ExpressionList)ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 96: // array_def -> LSQUARE, opt_exprs, RSQUARE
#line 209 "FParser/gppg/grammar.y"
                                              { CurrentSemanticValue = new ArrayDefinition((ExpressionList)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 97: // map_def -> LCURLY, pair_list, RCURLY
#line 212 "FParser/gppg/grammar.y"
                                           { CurrentSemanticValue = new MapDefinition((ExpressionPairList)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 98: // pair_list -> /* empty */
#line 215 "FParser/gppg/grammar.y"
                                   { CurrentSemanticValue = new ExpressionPairList(); }
#line default
        break;
      case 99: // pair_list -> pair
#line 216 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = new ExpressionPairList((ExpressionPair)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 100: // pair_list -> pair_list, COMMA, pair
#line 217 "FParser/gppg/grammar.y"
                                  { ((ExpressionPairList)ValueStack[ValueStack.Depth-3]).pairs.Add((ExpressionPair)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 101: // pair -> expr2, COLON, expr2
#line 220 "FParser/gppg/grammar.y"
                                   { CurrentSemanticValue = new ExpressionPair((FExpression)ValueStack[ValueStack.Depth-3], (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 102: // tuple_def -> LROUND, tuple_elist, RROUND
#line 223 "FParser/gppg/grammar.y"
                                             { CurrentSemanticValue = new TupleDefinition((TupleElementList)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 103: // tuple_elist -> tuple_elem
#line 226 "FParser/gppg/grammar.y"
                                    { CurrentSemanticValue = new TupleElementList((TupleElement)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 104: // tuple_elist -> tuple_elist, COMMA, tuple_elem
#line 227 "FParser/gppg/grammar.y"
                                        { ((TupleElementList)ValueStack[ValueStack.Depth-3]).elements.Add((TupleElement)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 105: // tuple_elem -> identifier, IS, expr2
#line 230 "FParser/gppg/grammar.y"
                                          { CurrentSemanticValue = new TupleElement((Identifier)ValueStack[ValueStack.Depth-3], (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 106: // tuple_elem -> expr2
#line 231 "FParser/gppg/grammar.y"
                       { CurrentSemanticValue = new TupleElement(null, (FExpression)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 107: // indexer -> LSQUARE, expr2, RSQUARE
#line 234 "FParser/gppg/grammar.y"
                                         { CurrentSemanticValue = new SquaresIndexer((FExpression)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 108: // indexer -> DOT, identifier
#line 235 "FParser/gppg/grammar.y"
                              { CurrentSemanticValue = new DotIndexer((Identifier)ValueStack[ValueStack.Depth-1], null);}
#line default
        break;
      case 109: // indexer -> DOT, INTEGER_VALUE
#line 236 "FParser/gppg/grammar.y"
                                { CurrentSemanticValue = new DotIndexer(null, new IntegerValue((int)((TokenValue)ValueStack[ValueStack.Depth-1])[0])); }
#line default
        break;
      case 110: // func_type -> FUNC, LROUND, type_list, RROUND, COLON, type
#line 239 "FParser/gppg/grammar.y"
                                                        { CurrentSemanticValue = new FunctionType((TypeList)ValueStack[ValueStack.Depth-4], (FType)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 111: // type_list -> /* empty */
#line 242 "FParser/gppg/grammar.y"
                                   { CurrentSemanticValue = new TypeList(); }
#line default
        break;
      case 112: // type_list -> type
#line 243 "FParser/gppg/grammar.y"
                      { CurrentSemanticValue = new TypeList((FType)ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 113: // type_list -> type_list, COMMA, type
#line 244 "FParser/gppg/grammar.y"
                                  { ((TypeList)ValueStack[ValueStack.Depth-3]).types.Add((FType)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 114: // array_type -> LSQUARE, type, RSQUARE
#line 247 "FParser/gppg/grammar.y"
                                           { CurrentSemanticValue = new ArrayType((FType)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 115: // tuple_type -> LROUND, type_list, RROUND
#line 250 "FParser/gppg/grammar.y"
                                              { CurrentSemanticValue = new TupleType((TypeList)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 116: // map_type -> LCURLY, type, COLON, type, RCURLY
#line 253 "FParser/gppg/grammar.y"
                                                { CurrentSemanticValue = new MapType((FType)ValueStack[ValueStack.Depth-4], (FType)ValueStack[ValueStack.Depth-2]); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((ETokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((ETokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
